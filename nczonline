<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/rss2full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0">
  <channel>
    <title xml:lang="en">Human Who Codes</title>
    
    <link>https://humanwhocodes.com/</link>
    <pubDate>Fri, 10 Jul 2020 01:08:59 +0000</pubDate>
    <lastBuildDate>Fri, 10 Jul 2020 01:08:59 +0000</lastBuildDate>
    <language>en-US</language>
    <generator>Jekyll v3.8.7</generator>
    <description>The Official Web Site of Nicholas C. Zakas</description>

    
    <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/rss+xml" href="http://feeds.feedburner.com/nczonline" /><feedburner:info uri="nczonline" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><item>
      <title>How I think about solving problems</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/nSi3UAjJoDQ/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>Problem Solving</category>
      
      <category>Work</category>
      
      <category>Skills</category>
      
      
      <category>Career</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2020/02/how-i-think-about-solving-problems/</guid>
      <description>Early on in my career as a software developer I thought my primary contribution was writing code. After all, software engineers are paid to ship software and writing code is a key component of that. It took several years for me to realize that there are numerous other contributions that go into shipping software (if...</description>
      <content:encoded><![CDATA[<p>Early on in my career as a software developer I thought my primary contribution was writing code. After all, software engineers are paid to ship software and writing code is a key component of that. It took several years for me to realize that there are numerous other contributions that go into shipping software (if not, why are there managers, designers, product managers, salespeople, etc.?). I slowly came to see myself less as a coder and more as a problem solver. Sometimes the problem could be solved by writing code while other times the solution didn’t involve code at all.</p>

<p>Once I realized my value as a problem solver, I set out to determine the most efficient way to address problems as they occurred. Moving into a tech lead position immediately thrust me into the middle of numerous ongoing daily problems. I had to figure out some way to act decisively, prioritize effectively, and solve as many problems as possible.</p>

<p>Eventually, I settled on a list of questions I would ask myself for each problem as it arose. I found that asking these questions, in order, helped me make the best decision possible:</p>

<ol>
  <li>Is this really a problem?</li>
  <li>Does the problem need to be solved?</li>
  <li>Does the problem need to be solved now?</li>
  <li>Does the problem need to be solved by me?</li>
  <li>Is there a simpler problem I can solve instead?</li>
</ol>

<p>Each question is designed to reveal something about the problem that allows you to go to the next step, or if you’re lucky, just avoid the problem altogether. There is some nuance to each question, so it’s helpful to describe each in more detail.</p>

<h2 id="is-this-really-a-problem">Is this really a problem?</h2>

<p>The first step to addressing any problem is to determine if it actually is a problem, and that requires a definition. For the purposes of this article, I’ll define a problem as anything that leads to an objectively undesirable outcome if not addressed. That means leaving your window open over night when it’s raining is a problem because the inside will get wet and that could potentially ruin your floor, furniture, or other possessions. A solution to the problem prevents the undesirable outcome, so closing the window before you go to bed will prevent your belongings from being ruined.</p>

<p>When in a leadership role, it’s common to receive complaints that sound like problems but are just opinions. For example, I’ve spoken with many software engineers who immediately upon starting a new job or joining a new team feel like the team is doing many things wrong: the framework they are using is wrong; the code style is wrong; the way files are organized is wrong. How will they ever get around to fixing all of these problems? It’s a monumental task.</p>

<p>I ask these software engineers this question: is it a problem or is it just different?
In many cases “wrong” just means “not what I’m used to or prefer.” If you can identify that a reported problem is not, in fact, a problem, then you no longer need to spend resources on a solution. A team member being unhappy with the way things are done is not an objectively undesirable outcome. There is nothing inherently problematic with disagreements on a team.
If you’re able to determine that a problem is not a problem, then you can move on to other tasks.</p>

<h2 id="does-the-problem-need-to-be-solved">Does the problem need to be solved?</h2>

<p>After you’ve determined that there is a problem, then next step is to determine if the problem needs to be solved. A problem doesn’t need to be solved if the undesirable outcome is tolerable and either constant or slow growing. For example, if a section of a web application is used by only admins (typically five or fewer people) and is slower to load than the rest of the application, you could determine that’s something you’re okay with. The problem is narrowly contained and affects a small number of people on the rare occasion that they use it. While it would be nice to solve the problem, it’s not required and the downside is small enough that not addressing it is unlikely to lead to bigger problems down the road.
Another way to ask this question is, “what happens if the problem is never solved?” If the answer is, “not much,” then it might be okay to not solve the problem.</p>

<h2 id="does-the-problem-need-to-be-solved-now">Does the problem need to be solved now?</h2>

<p>If you have a problem that needs to be solved, then the next question is to determine whether it needs to be solved now or if it can wait until later. Some problems are obviously urgent and need to be addressed immediately: the site is down, the application crashes whenever someone uses it, and so on. These problems need to be addressed because the undesirable outcome is immediate, ongoing, and likely to grow: the longer the site is down, the more money the company loses; the more times the application crashes, the more likely a customer will use a competitor.</p>

<p>Equally important is to determine if solving the problem can be deferred. There are a surprising number of non-urgent problems that bubble up to leadership. These are problems that need to be solved eventually but not immediately. The most common problem in software that fits this description is technical debt. Technical debt is any part of your application (or related infrastructure) that is not performing as well as it should. It’s something that will not cause a significant problem today or tomorrow, but it will eventually. In my experience, tech debt is rarely addressed until it becomes an emergency (which is too late). However, tech debt isn’t something that everything else should be dropped to address. It falls into that middle area where it shouldn’t be done today but definitely needs to get done.</p>

<p>If a problem doesn’t have to be addressed now, it’s usually a good idea to defer it. By defer it, I mean plan to address it in the future, not avoid doing anything about it. If now is not the right time to solve the problem then decide when is: in a week, a month, six months? Put it on your calendar or task management system so you won’t lose track of it.
Another way to ask this question is, “is the problem urgent?”</p>

<h2 id="does-the-problem-need-to-be-solved-by-me">Does the problem need to be solved by me?</h2>

<p>This question is most applicable to anyone in a leadership position but could also apply to anyone who already has too many tasks to complete. Is this problem something that requires special skills only you possess, or is it possible someone else could complete the task?</p>

<p>This is a question I adapted from advice one mentor gave me. I was complaining about how I just seemed to be collecting tasks and couldn’t keep up. He said I should ask myself, “is this a Nicholas problem?” There were certain things only I knew how to do and those were the things I should be focusing. Anything else should be delegated to someone else. Another important tip he gave me: just because you can do something faster than someone else doesn’t mean you should do it yourself. For most non-urgent tasks, it doesn’t matter if it is completed in one day or two.</p>

<p>So if the problem can be solved by someone else, and you’re either a leader or already have too much work, then delegate.</p>

<h2 id="is-there-an-easier-problem-i-can-solve-instead">Is there an easier problem I can solve instead?</h2>

<p>The final step in the process once you’ve determined that there’s an urgent problem that you need to solve personally is to determine if there’s an easier problem to solve. The key is that the easier problem must give you the same or a similar outcome to the original problem while saving time (or other resources).</p>

<p>When I was working on the new My Yahoo! page, one of our product managers proclaimed that beta customers had requested we add resizable columns to the page. This was something that would be fairly complicated because it was 2006 and web browsers were not anywhere as capable as they are today. The task wasn’t impossible, but on a page that was already overflowing with JavaScript, adding more to manage complex mouse movements and needing to save that information back to the server was a lot of painstaking error-prone work.</p>

<p>I asked for the raw data from the customer feedback sessions to see if I could figure out what the problem was that resizable columns would solve. In turned out no customers had asked for resizable columns (the product manager had inferred this request from the complaints). Instead, they were complaining that they couldn’t get the new My Yahoo! page to look like their old My Yahoo! page. We had created completely new layouts that didn’t match the old layouts, but it turned out people really liked the old layouts. This allowed us to focus on an easier problem: recreating the old layouts.</p>

<p>So, we spent a little time recreating the old layouts in the new page and re-ran the customer sessions. People were delighted that the new page now looked very similar to the old page. By solving the easier problem, we saved a lot of development time and the customers ended up just as happy.</p>

<p>There isn’t always an easier problem to solve, but it’s worth taking a moment to check whenever a problem seems particularly large or difficult.</p>

<h2 id="conclusion">Conclusion</h2>

<p>These five questions have become the basis for my problem-solving approach not just in my work, but in my life in general. Going through these questions whenever presented with a problem has made me a more efficient problem solver and, in general, happier with the outcomes. Can’t calculate a 15% tip for my waiter? I calculate 20% instead (or 10% if I’m displeased with the service). My high school alumni office keeps sending me notices that I’m not a verified alumnus? That’s not a problem I need to solve. I need to get a new driver’s license if I want to travel within the United States? That’s a problem I need to address this year, but not right now.</p>

<p>There are many ways to approach problem solving, and I’m not sure my approach will work for everyone. What I do know is that having an approach to solving problems is better than not having any approach. Life is filled with problems, small and large, that you’ll face every day. Having a clearly defined, repeatable strategy is the easiest way to make problem solving more tolerable.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=nSi3UAjJoDQ:w-BidjUGZ48:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=nSi3UAjJoDQ:w-BidjUGZ48:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=nSi3UAjJoDQ:w-BidjUGZ48:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=nSi3UAjJoDQ:w-BidjUGZ48:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=nSi3UAjJoDQ:w-BidjUGZ48:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=nSi3UAjJoDQ:w-BidjUGZ48:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/nSi3UAjJoDQ" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2020/02/how-i-think-about-solving-problems/</feedburner:origLink></item>
    
    <item>
      <title>Scheduling Jekyll posts with Netlify and GitHub Actions</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/DDHp3qw7BFc/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>Netlify</category>
      
      <category>Static Site</category>
      
      <category>GitHub</category>
      
      <category>GitHub Action</category>
      
      <category>Jekyll</category>
      
      
      <category>Programming</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2019/10/scheduling-jekyll-posts-netlify-github-actions/</guid>
      <description>Last year, I wrote about how to schedule Jekyll posts using Netlify and AWS Lambda[^1]. I used that approach from the moment I wrote that blog post up until today. What changed? In the past year, GitHub has introduced GitHub Actions[^2], a way to run container jobs triggered by different GitHub events. One of those...</description>
      <content:encoded><![CDATA[<p>Last year, I wrote about how to schedule Jekyll posts using Netlify and AWS Lambda[^1]. I used that approach from the moment I wrote that blog post up until today. What changed? In the past year, GitHub has introduced GitHub Actions[^2], a way to run container jobs triggered by different GitHub events. One of those events is a schedule defined in start cron format. So now instead of using AWS to schedule a cron job to deploy my static site, I use a GitHub Action.</p>

<aside>
  <p>For the sake of completeness, I’m duplicating some of the relevant content from my original post.</p>
</aside>

<h2 id="configuring-jekyll">Configuring Jekyll</h2>

<p>By default, Jekyll generates all blog posts in the <code class="highlighter-rouge">_posts</code> directory regardless of the publish date associated with each. That obviously doesn’t work well when you want to schedule posts to be published in the future, so the first step is to configure Jekyll to ignore future posts. To do so, add this key to Jekyll’s <code class="highlighter-rouge">_config.yml</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>future: false
</code></pre></div></div>

<p>Setting <code class="highlighter-rouge">future</code> to <code class="highlighter-rouge">false</code> tells Jekyll to skip any posts with a publish date in the future. You can then set the <code class="highlighter-rouge">date</code> field in the front matter of a post to a future date and know that the post will not be generated until then, like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">---</span>
<span class="nx">layout</span><span class="p">:</span> <span class="nx">post</span>
<span class="nx">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">My future post</span><span class="dl">"</span>
<span class="nx">date</span><span class="p">:</span> <span class="mi">2075</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span>
<span class="o">---</span>
</code></pre></div></div>

<p>This post will be published on January 1, 2075, so it will not be built by Jekyll until that point in time. I find it easier to schedule all posts for midnight so that whenever the site gets published, so long as the date matches, the post will always be generated.</p>

<h2 id="generating-a-netlify-build-hook">Generating a Netlify build hook</h2>

<p>One of the things I like about Netlify is that you can trigger a new site build whenever you want, either manually or programmatically. Netlify has a useful feature called a build hook[^3], which is a URL that triggers a new build. To generate a new build hook, go to the Netlify dashboard for your domain and go Site Settings and then to the Build &amp; Deploy page. When you scroll down, you’ll see a section for Build Hooks. Click “Add build hook”, give your new hook a name (something like “Daily Cron Job” would be appropriate here), and choose the branch to build from.</p>

<p><img src="https://humanwhocodes.com/images/posts/netlify-build-hooks.png" alt="Netlify create build hook dialog" /></p>

<p>You’ll be presented with a new URL that looks something like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://api.netlify.com/build_hooks/{some long unique identifier}
</code></pre></div></div>

<p>Whenever you send a <code class="highlighter-rouge">POST</code> request to the build hook, Netlify will pull the latest files from the GitHub repository, build the site, and deploy it. This is quite useful because you don’t need to worry about authenticating against the Netlify API; you can use this URL without credentials. Just make sure to keep this URL a secret. You can see the URL in your list of build hooks on the same page.</p>

<p><img src="https://humanwhocodes.com/images/posts/netlify-build-hooks-2.png" alt="Netlify build hooks list" /></p>

<p>(Don’t worry, the build hook URL in the screenshot has already been deleted.)</p>

<h2 id="storing-the-build-hook-as-a-github-secret">Storing the build hook as a GitHub secret</h2>

<p>Along with GitHub Actions, GitHub introduced a new feature that allows you to store secrets[^4] for each repository. Each repository has its own secret store that allows anyone with write access to store key-value pairs of sensitive information. Each key is written once and is never shown in the UI again but you can read that information from within a GitHub workflow file.</p>

<p>To find the secret store for your repository, click on the Settings tab at the top of the repository page, then select Secrets from the left menu. Type a name for your secret (for the purposes of this post, I used <code class="highlighter-rouge">netlify_build_url</code>) and paste in the value. Click the Add Secret button to store the secret.</p>

<p><img src="https://humanwhocodes.com/images/posts/2019/github-secret-add.png" alt="Storing a secret in GitHub" /></p>

<p>With the Netlify build hook stored safely in the secret store, it’s time to create the GitHub workflow file.</p>

<h2 id="setting-up-the-github-workflow">Setting up the GitHub Workflow</h2>

<p>GitHub Actions are triggered by workflows[^5] defined within your GitHub repository. Workflow files are defined in YAML format and must be stored in the <code class="highlighter-rouge">.github/workflows</code> folder of your project for GitHub to automatically detect them. An action starts up a container or virtual machine and runs any number of commands on it. You can choose to use MacOS, Windows, or Ubuntu environments to run the commands. You only need a way to make HTTP requests in order to trigger the Netlify build hook, so the Ubuntu environment (with <code class="highlighter-rouge">curl</code> available) is an easy choice.</p>

<p>Each workflow is triggered by one or more events specified by the <code class="highlighter-rouge">on</code> key. To create a cron job, define the <code class="highlighter-rouge">schedule</code> array and include at least one object containing a <code class="highlighter-rouge">cron</code> key. For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Netlify Deploy</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0</span><span class="nv"> </span><span class="s">15</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span>
</code></pre></div></div>

<p>This workflow is triggered at 3pm UTC every day of the week. All of the POSIX cron syntax is supported in workflows, making it easy to translate existing cron jobs.</p>

<aside>
  <p>Keep in mind that the cron job schedule is always relative to UTC time. Make sure to take into account your time zone when determining your schedule.</p>
</aside>

<p>The next step is to set up a job to be run on Ubuntu. To do that, create a <code class="highlighter-rouge">jobs</code> object. Here’s an example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Netlify Deploy</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0</span><span class="nv"> </span><span class="s">15</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Trigger Netlify Hook</span>
      <span class="na">run</span><span class="pi">:</span> <span class="s">curl -X POST ${{ secrets.netlify_build_url }}</span>
</code></pre></div></div>

<p>Each property of the <code class="highlighter-rouge">jobs</code> object is a separate job to be run (in order). The name of the job doesn’t really matter as long as it’s unique (<code class="highlighter-rouge">build</code> is a common job name). The <code class="highlighter-rouge">runs-on</code> property specifies the environment to run the command and <code class="highlighter-rouge">steps</code> is an array of commands to execute in the environment. There’s only one step in this example, which is triggering the Netlify hook. The <code class="highlighter-rouge">name</code> property should be set to something meaningful because it is displayed in the GitHub interface. The <code class="highlighter-rouge">run</code> property is the actual command to run. In this case, the command is a <code class="highlighter-rouge">curl</code> POST request to a specified URL, which is represented by a secret value. When the job executes, the Netlify deploy is triggered.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I switched this website over to use this GitHub Action approach as soon as I got access to the GitHub Actions beta. So far, I haven’t seen any difference in the end result (publishing my blog daily) and being able to modify the cron job within the website repository streamlines my work. I currently have this website being autogenerated every morning, and that includes pulling in new data via various APIs and publishing future-dated posts.</p>

<p>While I enjoyed experimenting with AWS Cloudwatch and Lambdas for scheduling future posts, I now feel that GitHub Actions is a better solution.</p>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://humanwhocodes.com/blog/2018/03/scheduling-jekyll-posts-netlify/">Scheduling Jekyll posts with Netlify and AWS</a></li>
  <li><a href="https://help.github.com/en/articles/about-github-actions">About GitHub Actions</a></li>
  <li><a href="https://www.netlify.com/docs/webhooks/#incoming-webhooks">Netlify Webhooks - Incoming Hooks</a></li>
  <li><a href="https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables">GitHub Actions - Creating and using secrets</a></li>
  <li><a href="https://help.github.com/en/articles/configuring-a-workflow">GitHub Actions - Configuring a Workflow</a></li>
</ol>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=DDHp3qw7BFc:U8EmndIZv3c:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=DDHp3qw7BFc:U8EmndIZv3c:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=DDHp3qw7BFc:U8EmndIZv3c:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=DDHp3qw7BFc:U8EmndIZv3c:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=DDHp3qw7BFc:U8EmndIZv3c:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=DDHp3qw7BFc:U8EmndIZv3c:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/DDHp3qw7BFc" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2019/10/scheduling-jekyll-posts-netlify-github-actions/</feedburner:origLink></item>
    
    <item>
      <title>Securing persistent environment variables using ZEIT Now</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/fnVFqSp6uZU/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>ZEIT</category>
      
      <category>Now</category>
      
      <category>Environment Variables</category>
      
      <category>Security</category>
      
      
      <category>Tutorial</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2019/09/securing-persistent-environment-variables-zeit-now/</guid>
      <description>I’m a big fan of ZEIT Now1 as an application hosting provider. The way the service abstracts all of the cloud computing details and allows teams to focus on building and deploying web applications is fantastic. That said, I had a lot of trouble setting up secure environment variables for my first application to use....</description>
      <content:encoded><![CDATA[<p>I’m a big fan of ZEIT Now<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> as an application hosting provider. The way the service abstracts all of the cloud computing details and allows teams to focus on building and deploying web applications is fantastic. That said, I had a lot of trouble setting up secure environment variables for my first application to use. I was used to other services like Netlify<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> and AwS Lambda<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> exposing environment variables in the web interface to allow secure transmission of important information. When ZEIT Now didn’t provide the same option in its web interface, I had to spend some time researching how to securely set persistent environment variables on my application.</p>

<p>For the purposes of this post, assume that you need to set two environment variables, <code class="highlighter-rouge">CLIENT_ID</code> and <code class="highlighter-rouge">CLIENT_SECRET</code>. These values won’t change between deployments (presumably because they are used to authenticate the application with OAuth). As such, you don’t want to manually set these environment variables during every deployment but would rather have them stored and used each time the application is deployed.</p>

<h2 id="setting-environment-variables-in-zeit-now">Setting environment variables in ZEIT Now</h2>

<p>According to the documentation<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>, there are two ways to set environment variables for your ZEIT Now project. The first is to use the <code class="highlighter-rouge">now</code> command line tool with the <code class="highlighter-rouge">-e</code> option, such as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>now <span class="nt">-e</span> <span class="nv">CLIENT_ID</span><span class="o">=</span><span class="s2">"abcdefg"</span> <span class="nt">-e</span> <span class="nv">CLIENT_SECRET</span><span class="o">=</span><span class="s2">"123456789abcdefg"</span>
</code></pre></div></div>

<p>This approach not only sets the environment variables but also triggers a new deploy. The environment variables set here are valid only for the triggered deploy and will not automatically be available for any future deploys. You need to include the environment variables any time you deploy, which isn’t ideal when the information doesn’t need to change between deploys.</p>

<p>The second way to set environment variables is to include them in the <code class="highlighter-rouge">now.json</code> file. There are actually two keys that can contain environment variables in <code class="highlighter-rouge">now.json</code>:</p>

<ol>
  <li><code class="highlighter-rouge">env</code> is used for environment variables needed only during application runtime.</li>
  <li><code class="highlighter-rouge">build.env</code> is used for environment variables needed only during the build process.</li>
</ol>

<p>Whether you need the environment variables in one or both modes is up to how your application is built.</p>

<aside class="warn">
  <p>Be particularly careful if your build process uses the same JavaScript configuration file as your runtime, as you may find both the build and runtime will require the same environment variables even if it’s not immediately obvious (this happened to me). This is common with universal frameworks such as Next.js and Nuxt.js.</p>
</aside>

<p>Both the <code class="highlighter-rouge">env</code> and <code class="highlighter-rouge">build.env</code> keys are objects where the property names are the environment variables to set and the property values are the environment variable values. For example, the following sets <code class="highlighter-rouge">CLIENT_ID</code> and <code class="highlighter-rouge">CLIENT_SECRET</code> in both the build and runtime environments:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"CLIENT_ID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"abcdefg"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"CLIENT_SECRET"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123456789abcdefg"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"CLIENT_ID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"abcdefg"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"CLIENT_SECRET"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123456789abcdefg"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The environment variables in <code class="highlighter-rouge">now.json</code> are set for each deploy automatically, so this is the easiest way to persist important information for your application. Of course, if your environment variables contain sensitive information then you wouldn’t want to check <code class="highlighter-rouge">now.json</code> into your source code repository. That’s not a great solution because <code class="highlighter-rouge">now.json</code> contains more than just environment variables. The solution is to use <code class="highlighter-rouge">now.json</code> with project secrets.</p>

<h2 id="using-zeit-now-secrets">Using ZEIT Now secrets</h2>

<p>ZEIT Now has the ability to store secrets associated with each project. You can set a secret using the <code class="highlighter-rouge">now</code> CLI. You can name these secrets whatever you want, but the documentation<sup id="fnref:4:1"><a href="#fn:4" class="footnote">4</a></sup> suggests using lower dash case, Here’s an example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>now secret add client-id abcdefg
now secret add client-secret 123456890abcdefg
</code></pre></div></div>

<p>These commands create two secrets: <code class="highlighter-rouge">client-id</code> and <code class="highlighter-rouge">client-secret</code>. These are automatically synced to my ZEIT Now project and only available within that one project.</p>

<p>The next step is to reference these secrets inside of the <code class="highlighter-rouge">now.json</code> file. To specify that the value is a secret, prefix it with the <code class="highlighter-rouge">@</code> symbol. For example, the following sets <code class="highlighter-rouge">CLIENT_ID</code> and <code class="highlighter-rouge">CLIENT_SECRET</code> in both the build and runtime environments:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"CLIENT_ID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@client-id"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"CLIENT_SECRET"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@client-secret"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"CLIENT_ID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@client-id"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"CLIENT_SECRET"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@client-secret"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This <code class="highlighter-rouge">now.json</code> configuration specifies that the environment variables should be filled with secret values. Each time your application is deployed, ZEIT Now will read the <code class="highlighter-rouge">client-id</code> and <code class="highlighter-rouge">client-secret</code> secrets and expose them as the environment variables <code class="highlighter-rouge">CLIENT_ID</code> and <code class="highlighter-rouge">CLIENT_SECRET</code>. It’s now safe to check <code class="highlighter-rouge">now.json</code> into your source code repository because it’s not exposing any secure information. You can just use the <code class="highlighter-rouge">now</code> command to deploy your application knowing that all of the important environment variables will be added automatically.</p>

<h2 id="summary">Summary</h2>

<p>The way ZEIT Now handles environment variables takes a little getting used to. Whereas other services allow you to specify secret environment variables directly in their web interface, ZEIT Now requires using the <code class="highlighter-rouge">now</code> command line tool to do so.</p>

<p>The easiest way to securely persist environment variables in your ZEIT Now project is to store the information in secrets and then specify the environment variables in your <code class="highlighter-rouge">now.json</code> file. Doing so allows you to check <code class="highlighter-rouge">now.json</code> into your source code repository without exposing sensitive information. Given the many configuration options available in <code class="highlighter-rouge">now.json</code>, it’s helpful to have that file in source control so you can make changes when necessary.</p>

<h2 id="references">References</h2>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://zeit.co/now">ZEIT Now</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="https://netlify.com">Netlify</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="https://aws.amazon.com/lambda">AWS Lambda</a> <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="https://docs-git-plug-n-play-master.zeit.now.sh/docs/v2/deployments/environment-variables-and-secrets/">ZEIT Now - Environment Variables and Secrets</a> <a href="#fnref:4" class="reversefootnote">&#8617;</a> <a href="#fnref:4:1" class="reversefootnote">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=fnVFqSp6uZU:aYfgIjL8ssA:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=fnVFqSp6uZU:aYfgIjL8ssA:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=fnVFqSp6uZU:aYfgIjL8ssA:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=fnVFqSp6uZU:aYfgIjL8ssA:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=fnVFqSp6uZU:aYfgIjL8ssA:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=fnVFqSp6uZU:aYfgIjL8ssA:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/fnVFqSp6uZU" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2019/09/securing-persistent-environment-variables-zeit-now/</feedburner:origLink></item>
    
    <item>
      <title>Outputting Markdown from Jekyll using hooks</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/w7KVvgxiXGc/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>Jekyll</category>
      
      <category>Liquid</category>
      
      <category>Ruby</category>
      
      <category>Markdown</category>
      
      
      <category>Tutorial</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2019/04/jekyll-hooks-output-markdown/</guid>
      <description>One of the things I most enjoy about Jekyll1 is writing my blog posts in Markdown. I love not worrying about HTML and just letting Jekyll generate it for me when a post is published. Using Liquid tags directly in Markdown is also helpful, as I can define sitewide or page-specific variables and then replace...</description>
      <content:encoded><![CDATA[<p>One of the things I most enjoy about Jekyll<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> is writing my blog posts in Markdown. I love not worrying about HTML and just letting Jekyll generate it for me when a post is published. Using Liquid tags directly in Markdown is also helpful, as I can define sitewide or page-specific variables and then replace them during site generation. This is a really useful capability that I wanted to take advantage of to output Markdown for use in other sites. Places like Medium and dev.to allow you to post Markdown articles, so I thought repurposing the Markdown I used in Jekyll would make crossposting to those sites easier.</p>

<p>I assumed that there would be a property on the <code class="highlighter-rouge">page</code> variable that would give me access to the rendered Markdown, but I was wrong. This began a long journey through relatively undocumented corners of the Jekyll plugin ecosystem. I’m sharing that journey here in the hopes that others won’t have to go through the same frustrating experience.</p>

<h2 id="an-introduction-to-jekyll-plugins">An introduction to Jekyll plugins</h2>

<p>I was relatively unfamiliar with the Jekyll plugin system before trying to figure out how to get the rendered Markdown for a post. Jekyll supports a number of different plugin types<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>. These plugin types affect Jekyll directly:</p>

<ul>
  <li><strong>Generators</strong> - plugins that create files. While it’s not required that generators create files, this is the most frequent use case. Plugins like <code class="highlighter-rouge">jekyll-archives</code> use generators to create files that wouldn’t otherwise exist.</li>
  <li><strong>Converters</strong> - plugins that convert between text formats. Jekyll’s default of converting Markdown files into HTML is implemented using a converter. You can add support for other formats to be converted into HTML (or any other format) by creating your own converter.</li>
  <li><strong>Hooks</strong> - plugins that listen for specific events in Jekyll and then perform some action in relation to the events.</li>
</ul>

<p>There are also two plugin types that are used primarily with Liquid:</p>

<ul>
  <li><strong>Tags</strong> - create a new tag in the format <code class="highlighter-rouge">{% tagname %}</code> for use in your templates.</li>
  <li><strong>Filters</strong> - create a new filter that you can use to transform input, such as <code class="highlighter-rouge">{{ data | filter }}</code></li>
</ul>

<p>There is also a <em>command</em> plugin type that allows you to create new commands to use with the <code class="highlighter-rouge">jekyll</code> command line tool. The <code class="highlighter-rouge">jekyll build</code> command is implemented using this plugin type.</p>

<h2 id="designing-the-solution">Designing the solution</h2>

<p>My goal was to get the Liquid-rendered Markdown content (so all data processing was complete) for each post into a <code class="highlighter-rouge">page</code> property so that I could output that content into a JSON file on my server. That JSON file would then be fetched by an AWS Lambda function that crossposted that content to other locations. I didn’t need to generate any extra files or convert from one format to another, so it seemed clear that using a hook would be the best approach.</p>

<p>Hooks are basically event handlers in which you specify a container and the event to listen to. Jekyll passes you the relevant information for that event and you can then perform any action you’d like. There are four containers you can use with hooks:</p>

<ul>
  <li><code class="highlighter-rouge">:site</code> - the <code class="highlighter-rouge">site</code> object</li>
  <li><code class="highlighter-rouge">:page</code> - the <code class="highlighter-rouge">page</code> object for each non-collection page</li>
  <li><code class="highlighter-rouge">:post</code> - the <code class="highlighter-rouge">post</code> object for each blog post</li>
  <li><code class="highlighter-rouge">:document</code> - the <code class="highlighter-rouge">document</code> object for each document in each collection (including blog posts and custom collections)</li>
</ul>

<p>Because I wanted this solution to work for all collections in my site, I chose to use <code class="highlighter-rouge">:document</code> as an easy way to make the same change for all collection types.</p>

<p>There were two events for <code class="highlighter-rouge">:document</code> that immediately seemed relevant to my goal:</p>

<ul>
  <li><code class="highlighter-rouge">:pre_render</code> - fires before the document content is rendered</li>
  <li><code class="highlighter-rouge">:post_render</code> - fires after the document content is rendered but before the content is written to disk</li>
</ul>

<p>It seemed clear that getting the Markdown content would require using the <code class="highlighter-rouge">:pre_render</code> event, so I started by using this setup:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Jekyll</span><span class="o">::</span><span class="no">Hooks</span><span class="p">.</span><span class="nf">register</span> <span class="ss">:documents</span><span class="p">,</span> <span class="ss">:pre_render</span> <span class="k">do</span> <span class="o">|</span><span class="n">doc</span><span class="p">,</span> <span class="n">payload</span><span class="o">|</span>

  <span class="c1"># code goes here</span>

<span class="k">end</span>
</code></pre></div></div>

<p>Each hook is passed its target container object, in this case <code class="highlighter-rouge">doc</code> is a document, and a <code class="highlighter-rouge">payload</code> object containing all of the relevant variables for working with the document (these are the variables available inside of a template when the document is rendered).</p>

<p>The <code class="highlighter-rouge">:document, :prerender</code> hook is called just before each document is rendered, meaning you don’t need to worry about looping over collections manually.</p>

<h2 id="the-catch-rendering-doesnt-mean-what-you-think-it-means">The catch: Rendering doesn’t mean what you think it means</h2>

<p>I figured that the <code class="highlighter-rouge">content</code> property inside of a <code class="highlighter-rouge">:document, :pre_render</code> hook would contain the Liquid-rendered Markdown instead of the final HTML, but I was only half correct. The <code class="highlighter-rouge">content</code> property actually contains the unprocessed Markdown that still contains all of the Liquid variables. It turns out that “prerender” means something different than I thought.</p>

<p>The lifecycle of the <code class="highlighter-rouge">content</code> property for a given document in Jekyll looks like this<sup id="fnref:4"><a href="#fn:4" class="footnote">3</a></sup>:</p>

<ol>
  <li>The <code class="highlighter-rouge">content</code> property contains the file content with the front matter removed (typically Markdown)</li>
  <li><code class="highlighter-rouge">:pre_render</code> hook fires</li>
  <li>The <code class="highlighter-rouge">content</code> property is rewritten with Liquid tags rendered (this is what Jekyll internally refers to as <em>rendering</em>)</li>
  <li>The <code class="highlighter-rouge">content</code> property is rewritten after being passed through a converter (this is what Jekyll internally refers to as <em>converting</em>)</li>
  <li>The <code class="highlighter-rouge">:post_render</code> hook fires</li>
</ol>

<p>While Jekyll internally separates rendering (which is apply Liquid) and converting (the Markdown to HTML conversion, for example), the exposed hooks don’t make this distinction. That means if I want Markdown content with Liquid variables replaced then I’ll need to get the prerendered Markdown content and render it myself.</p>

<h2 id="the-solution">The solution</h2>

<p>At this point, my plan was to create a <code class="highlighter-rouge">pre_render</code> hook that did the following:</p>

<ol>
  <li>Retrieved the raw content for each document (contained in <code class="highlighter-rouge">doc.content</code>)</li>
  <li>Render that content using Liquid</li>
  <li>Store the result in a new property called <code class="highlighter-rouge">unconverted_content</code> that would be accessible inside my templates</li>
</ol>

<p>I started out with this basic idea of how things should look:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Jekyll</span><span class="o">::</span><span class="no">Hooks</span><span class="p">.</span><span class="nf">register</span> <span class="ss">:documents</span><span class="p">,</span> <span class="ss">:pre_render</span> <span class="k">do</span> <span class="o">|</span><span class="n">doc</span><span class="p">,</span> <span class="n">payload</span><span class="o">|</span>

  <span class="c1"># get the raw content</span>
  <span class="n">raw_content</span> <span class="o">=</span> <span class="n">doc</span><span class="p">.</span><span class="nf">content</span>

  <span class="c1"># do something to that raw content</span>
  <span class="n">rendered_content</span> <span class="o">=</span> <span class="n">doSomethingTo</span><span class="p">(</span><span class="n">raw_content</span><span class="p">)</span>

  <span class="c1"># store it back on the document</span>
  <span class="n">doc</span><span class="p">.</span><span class="nf">rendered_content</span> <span class="o">=</span> <span class="n">rendered_content</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Of course, I’m not very familiar with Ruby, so it turned out this wouldn’t work quite the way I thought.</p>

<p>First, <code class="highlighter-rouge">doc</code> is an instance of a class, and you cannot arbitrarily add new properties to objects in Ruby. Jekyll provides a <code class="highlighter-rouge">data</code> hash on the document object, however, that can be used to add new properties that are available in templates. So the last line needs to be rewritten:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Jekyll</span><span class="o">::</span><span class="no">Hooks</span><span class="p">.</span><span class="nf">register</span> <span class="ss">:documents</span><span class="p">,</span> <span class="ss">:pre_render</span> <span class="k">do</span> <span class="o">|</span><span class="n">doc</span><span class="p">,</span> <span class="n">payload</span><span class="o">|</span>

  <span class="c1"># get the raw content</span>
  <span class="n">raw_content</span> <span class="o">=</span> <span class="n">doc</span><span class="p">.</span><span class="nf">content</span>

  <span class="c1"># do something to that raw content</span>
  <span class="n">rendered_content</span> <span class="o">=</span> <span class="n">doSomethingTo</span><span class="p">(</span><span class="n">raw_content</span><span class="p">)</span>

  <span class="c1"># store it back on the document</span>
  <span class="n">doc</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'rendered_content'</span><span class="p">]</span> <span class="o">=</span> <span class="n">rendered_content</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The last line ensures that <code class="highlighter-rouge">page.rendered_content</code> will be available inside of templates later on (and remember, this is happening during <code class="highlighter-rouge">pre_render</code>, so the templates haven’t yet been used).</p>

<p>The next step was to use Liquid to render the raw content. To figure out how to do this, I had to dig around in the Jekyll source<sup id="fnref:5"><a href="#fn:5" class="footnote">4</a></sup> as there wasn’t any documentation. Rendering Liquid the exact same way that Jekyll does by default requires a bit of setup and pulling in pieces of data from a couple different places. Here is the final code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Jekyll</span><span class="o">::</span><span class="no">Hooks</span><span class="p">.</span><span class="nf">register</span> <span class="ss">:documents</span><span class="p">,</span> <span class="ss">:pre_render</span> <span class="k">do</span> <span class="o">|</span><span class="n">doc</span><span class="p">,</span> <span class="n">payload</span><span class="o">|</span>

  <span class="c1"># make some local variables for convenience</span>
  <span class="n">site</span> <span class="o">=</span> <span class="n">doc</span><span class="p">.</span><span class="nf">site</span>
  <span class="n">liquid_options</span> <span class="o">=</span> <span class="n">site</span><span class="p">.</span><span class="nf">config</span><span class="p">[</span><span class="s2">"liquid"</span><span class="p">]</span>

  <span class="c1"># create a template object</span>
  <span class="n">template</span> <span class="o">=</span> <span class="n">site</span><span class="p">.</span><span class="nf">liquid_renderer</span><span class="p">.</span><span class="nf">file</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="nf">path</span><span class="p">).</span><span class="nf">parse</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="nf">content</span><span class="p">)</span>

  <span class="c1"># the render method expects this information</span>
  <span class="n">info</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">:registers</span>        <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:site</span> <span class="o">=&gt;</span> <span class="n">site</span><span class="p">,</span> <span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">payload</span><span class="p">[</span><span class="s1">'page'</span><span class="p">]</span> <span class="p">},</span>
    <span class="ss">:strict_filters</span>   <span class="o">=&gt;</span> <span class="n">liquid_options</span><span class="p">[</span><span class="s2">"strict_filters"</span><span class="p">],</span>
    <span class="ss">:strict_variables</span> <span class="o">=&gt;</span> <span class="n">liquid_options</span><span class="p">[</span><span class="s2">"strict_variables"</span><span class="p">],</span>
  <span class="p">}</span>

  <span class="c1"># render the content into a new property</span>
  <span class="n">doc</span><span class="p">.</span><span class="nf">data</span><span class="p">[</span><span class="s1">'rendered_content'</span><span class="p">]</span> <span class="o">=</span> <span class="n">template</span><span class="p">.</span><span class="nf">render!</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The first step in this hook is to create a Liquid template object. While you can do this directly using <code class="highlighter-rouge">Liquid::Template</code>, Jekyll caches Liquid templates internally when using <code class="highlighter-rouge">site.liquid_renderer.file(doc.path)</code>, so it makes sense to use that keep the Jekyll build as fast as possible. The content is then parsed into a template object.</p>

<p>The <code class="highlighter-rouge">template.render()</code> method needs not only the <code class="highlighter-rouge">payload</code> object but also some additional information. The <code class="highlighter-rouge">info</code> hash passes in <code class="highlighter-rouge">registers</code>, which are local variables accessible inside of the template, and some options for how liquid should behave. With all of that data ready, the content is rendered into the new property.</p>

<p>This file then needs to be placed in the <code class="highlighter-rouge">_plugins</code> directory of a Jekyll site to run each time the site is built.</p>

<h2 id="accessing-rendered_content">Accessing <code class="highlighter-rouge">rendered_content</code></h2>

<p>With this plugin installed, the Markdown content is available through the <code class="highlighter-rouge">rendered_content</code> property, like this:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">rendered_content</span><span class="w"> </span><span class="p">}}</span>
</code></pre></div></div>

<p>The only problem is that outputting <code class="highlighter-rouge">page.rendered_content</code> into a Markdown page will cause all of that Markdown to be converted into HTML. (Remember, Jekyll internally renders Liquid first and then the result is converted into HTML.) So in order to output the raw Markdown, you’ll need to either apply a filter that prevents the Markdown-to-HTML conversion from happening, or use a file type that doesn’t convert automatically.</p>

<p>In my case, I’m storing the Markdown content in a JSON structure, so I’m using the <code class="highlighter-rouge">jsonify</code> filter, like this:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: null
---
{
    <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">posts</span><span class="p">.</span><span class="nf">first</span><span class="w"> </span><span class="p">%}</span>
    "id": "<span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">absolute_url</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">sha1</span><span class="w"> </span><span class="p">}}</span>",
    "title": <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">jsonify</span><span class="w"> </span><span class="p">}}</span>,
    "date_published": "<span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date_to_xmlschema</span><span class="w"> </span><span class="p">}}</span>",
    "date_published_pretty": "<span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s2">"%B %-d, %Y"</span><span class="w"> </span><span class="p">}}</span>",
    "summary": <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">excerpt</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip_html</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip_newlines</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">jsonify</span><span class="w"> </span><span class="p">}}</span>,
    "content_markdown": <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">rendered_content</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">jsonify</span><span class="w"> </span><span class="p">}}</span>,
    "content_html": <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">content</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">jsonify</span><span class="w"> </span><span class="p">}}</span>,
    "tags": <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">tags</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">jsonify</span><span class="w"> </span><span class="p">}}</span>,
    "url": "<span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">absolute_url</span><span class="w"> </span><span class="p">}}</span>"
}
</code></pre></div></div>

<p>Another option is to create a <code class="highlighter-rouge">rendered_content.txt</code> file in the <code class="highlighter-rouge">_includes</code> directory that just contains this:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{{</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">rendered_content</span><span class="w"> </span><span class="p">}}</span>
</code></pre></div></div>

<p>Then, you can include that file anywhere you want the unconverted Markdown content, like this:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="nt">include</span><span class="w"> </span><span class="s2">"rendered_content.txt"</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Jekyll hooks are a useful feature that let you interact with Jekyll while it is generating your site, allowing you to intercept, modify, and add data along the way. While there aren’t a lot of examples in the wild, the concept is straightforward enough that with a few pointers, any programmer should be able to get something working. The biggest stumbling point for me was the lack of documentation on how to use Jekyll hooks, so I’m hoping that this writeup will help others who are trying to accomplish similar tasks in their Jekyll sites.</p>

<p>To date, I’ve found Jekyll to be extremely versatile and customizable. Being able to get the Liquid-rendered Markdown (even though it took a bit of work) has made my publishing workflow much more flexible, as I’m now more easily able to crosspost my writing on various other sites.</p>

<h2 id="references">References</h2>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://jekyllrb.com/">Jekyll</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="https://jekyllrb.com/docs/plugins/">Jekyll Plugins</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="https://jekyllrb.com/tutorials/orderofinterpretation/">Jekyll Order of Interpretation</a> <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="https://github.com/jekyll/jekyll/blob/be78b4246c4513738eb4c18b76569182dd4f8578/lib/jekyll/renderer.rb#L70-L93">Jekyll renderer.rb</a> <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=w7KVvgxiXGc:w5fWFhjlv1c:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=w7KVvgxiXGc:w5fWFhjlv1c:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=w7KVvgxiXGc:w5fWFhjlv1c:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=w7KVvgxiXGc:w5fWFhjlv1c:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=w7KVvgxiXGc:w5fWFhjlv1c:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=w7KVvgxiXGc:w5fWFhjlv1c:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/w7KVvgxiXGc" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2019/04/jekyll-hooks-output-markdown/</feedburner:origLink></item>
    
    <item>
      <title>Computer science in JavaScript: Circular Doubly-linked lists</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/Ui_PyERMDcs/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>Computer Science</category>
      
      <category>Data Structures</category>
      
      <category>JavaScript</category>
      
      <category>Linked List</category>
      
      <category>Programming</category>
      
      
      <category>Computer Science</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2019/03/computer-science-in-javascript-circular-doubly-linked-lists/</guid>
      <description>In my previous post, I discussed what changes are necessary to turn a singly linked list into a doubly linked list. I recommend reading that post before this one (if you haven’t already). This post is about modifying a doubly linked list (also called a linear doubly linked list) in such a way that the...</description>
      <content:encoded><![CDATA[<p>In my <a href="https://humanwhocodes.com/blog/2019/02/computer-science-in-javascript-doubly-linked-lists/">previous post</a>, I discussed what changes are necessary to turn a singly linked list into a doubly linked list. I recommend reading that post before this one (if you haven’t already). This post is about modifying a doubly linked list (also called a <em>linear doubly linked list</em>) in such a way that the last node in the list points to the first node in the list, effectively making the list circular. <em>Circular doubly linked lists</em> are interesting because they allow you to continuously move through list items without needing to check for the end of the list. You may encounter this when creating playlists or round-robin distribution of traffic to servers.</p>

<aside class="note">
  <p>It is possible to create a circular singly linked list, as well. I won’t be covering circular singly linked lists in this blog post series, however, you can find source code for a circular singly linked list in my GitHub repo, <a href="https://github.com/humanwhocodes/computer-science-in-javascript">Computer Science in JavaScript</a>.</p>
</aside>

<h2 id="the-design-of-a-circular-doubly-linked-list">The design of a circular doubly linked list</h2>

<p>The nodes in a circular doubly linked list are no different than the nodes for a linear doubly linked list. Each node contains data and pointers to the next and previous items in the list. Here is what that looks like in JavaScript:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">CircularDoublyLinkedListNode</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can then create a circular doubly linked list using the <code class="highlighter-rouge">CircularDoublyLinkedListNode</code> class like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// create the first node</span>
<span class="kd">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CircularDoublyLinkedListNode</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>

<span class="c1">// add a second node</span>
<span class="kd">const</span> <span class="nx">secondNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CircularDoublyLinkedListNode</span><span class="p">(</span><span class="mi">99</span><span class="p">);</span>
<span class="nx">head</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">secondNode</span><span class="p">;</span>
<span class="nx">secondNode</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>

<span class="c1">// add a third node</span>
<span class="kd">const</span> <span class="nx">thirdNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CircularDoublyLinkedListNode</span><span class="p">(</span><span class="mi">37</span><span class="p">);</span>
<span class="nx">secondNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">thirdNode</span><span class="p">;</span>
<span class="nx">thirdNode</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">secondNode</span><span class="p">;</span>

<span class="c1">// point the last node to the first</span>
<span class="nx">thirdNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>
<span class="nx">head</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">thirdNode</span><span class="p">;</span>
</code></pre></div></div>

<p>The head of the list and subsequent nodes in the list are created the same way as in a linear doubly linked list. The only difference is the last step where the last node’s <code class="highlighter-rouge">next</code> pointer is set to <code class="highlighter-rouge">head</code> and the <code class="highlighter-rouge">head</code> node’s <code class="highlighter-rouge">previous</code> pointer is set to the last node. The following image shows the resulting data structure.</p>

<p><img src="https://humanwhocodes.com/images/posts/2019/circular-doubly-linked-list.png" alt="Circular doubly linked list diagram" /></p>

<p>Traversing a circular doubly linked list is a bit different than a linear doubly linked list because following <code class="highlighter-rouge">next</code> pointers alone will result in an infinite loop. For example, this is an infinite loop:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>

<span class="c1">// infinite loop: `current` is never `null`</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In some cases you will want to continue iterating over the loop forever, but that typically does not happen in the context of a loop as in this code. In other cases, you’ll want to iterate over each node in the loop until the last node is found. To do that, you’ll need to check to see when <code class="highlighter-rouge">current</code> is <code class="highlighter-rouge">head</code>, which means you’re back at the beginning of the loop. However, simply swapping <code class="highlighter-rouge">null</code> for <code class="highlighter-rouge">head</code> in the previous example results in the loop not executing at all:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>

<span class="c1">// loop is skipped: `current` is already `head`</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="nx">head</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The problem here is that <code class="highlighter-rouge">current</code> started out equal to <code class="highlighter-rouge">head</code> and the loop only proceeds when <code class="highlighter-rouge">current</code> is not equal to <code class="highlighter-rouge">head</code>. The solution is to use a post-test loop instead of a pre-test loop, and in JavaScript, that means using a <code class="highlighter-rouge">do-while</code> loop:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">do</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
        <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="nx">head</span><span class="p">);</span>

<span class="p">}</span>
</code></pre></div></div>

<p>In this code, the check to see if <code class="highlighter-rouge">current</code> is equal to <code class="highlighter-rouge">head</code> appears at the end of the loop rather than at the start. To ensure that the loop won’t start unless <code class="highlighter-rouge">current</code> isn’t <code class="highlighter-rouge">null</code>, an <code class="highlighter-rouge">if</code> statement typically must preceed the <code class="highlighter-rouge">do-while</code> loop (you no longer have the pre-test of a <code class="highlighter-rouge">while</code> loop to cover that case for you). The loop will proceed until <code class="highlighter-rouge">current</code> is once again <code class="highlighter-rouge">head</code>, meaning that the entire list has been traversed.</p>

<p>Also similar to linear doubly linked lists, you can traverse the nodes in reverse order by starting from the last node. Circular doubly linked lists don’t separately track the list tail because you can always access the tail through <code class="highlighter-rouge">head.previous</code>, for example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">head</span><span class="p">.</span><span class="nx">previous</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">do</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
        <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="nx">head</span><span class="p">.</span><span class="nx">previous</span><span class="p">);</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="the-circulardoublylinkedlist-class">The <code class="highlighter-rouge">CircularDoublyLinkedList</code> class</h2>

<p>The <code class="highlighter-rouge">CircularDoublyLinkedList</code> class starts out looking a lot like the <code class="highlighter-rouge">DoublyLinkedList</code> class from the previous article with the exception that there is no <code class="highlighter-rouge">tail</code> property to track the last node in the list:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">"</span><span class="s2">head</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">CircularDoublyLinkedList</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The primary differences between a linear and circular doubly linked list have to do with the methods for adding, removing, and traversing the nodes.</p>

<h3 id="adding-new-data-to-the-list">Adding new data to the list</h3>

<p>The same basic algorithm for adding data is used for both linear and circular doubly linked lists, with the difference being the pointers that must be updated to complete the process. Here is the <code class="highlighter-rouge">add()</code> method for the <code class="highlighter-rouge">CircularDoublyLinkedList</code> class:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">CircularDoublyLinkedList</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nx">add</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    
        <span class="kd">const</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CircularDoublyLinkedListNode</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                
        <span class="c1">// special case: no items in the list yet</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="nx">newNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="nx">newNode</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="kd">const</span> <span class="nx">tail</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">previous</span><span class="p">;</span>

            <span class="nx">tail</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="nx">newNode</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">tail</span><span class="p">;</span>
            <span class="nx">newNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>
            <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">add()</code> method for the circular doubly linked list accepts one argument, the data to insert into the list. If the list is empty (<code class="highlighter-rouge">this[head]</code> is <code class="highlighter-rouge">null</code>) then the new node is assigned to <code class="highlighter-rouge">this[head]</code>. The extra step to make the list circular is to ensure that both <code class="highlighter-rouge">newNode.next</code> and <code class="highlighter-rouge">newNode.previous</code> point to <code class="highlighter-rouge">newNode</code>.</p>

<p>If the list is not empty, then a new node is added after the current tail, which is retrieved using <code class="highlighter-rouge">this[head].previous</code>. The new node can then be added to <code class="highlighter-rouge">tail.next</code>. Remember, you are actually inserting a new node between the tail and the head of the list, so this operation looks a lot more like an insert than an append. Once complete, <code class="highlighter-rouge">newNode</code> is the list tail and therefore <code class="highlighter-rouge">newNode.next</code> must point to <code class="highlighter-rouge">this[head]</code> and <code class="highlighter-rouge">this[head].previous</code> must point to <code class="highlighter-rouge">newNode</code>.</p>

<p>As with a linear doubly linked list, the complexity of this <code class="highlighter-rouge">add()</code> method is O(1) because no traversal is necessary.</p>

<h3 id="retrieving-data-from-the-list">Retrieving data from the list</h3>

<p>The <code class="highlighter-rouge">get()</code> method for a circular doubly linked list follows the basic algorithm from the start of this post. You must traverse the list while keeping track of how deep into the list you have gone and ensuring you don’t loop back around to the front of the list. Here is how the <code class="highlighter-rouge">get()</code> method is implemented.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">CircularDoublyLinkedList</span> <span class="p">{</span>

    <span class="c1">// other methods hidden for clarity</span>

    <span class="kd">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// ensure `index` is a positive value and the list isn't empty</span>
        <span class="k">if</span> <span class="p">((</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">))</span> <span class="p">{</span>

            <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>
            <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="k">do</span> <span class="p">{</span>

                <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
                <span class="nx">i</span><span class="o">++</span><span class="p">;</span>

            <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="nx">current</span> <span class="o">!==</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">index</span><span class="p">));</span>

        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">get()</code> method first checks to make sure that <code class="highlighter-rouge">index</code> is a positive value and that the list isn’t empty. If either case is true, then the method returns <code class="highlighter-rouge">undefined</code>. Remember, you must always use an <code class="highlighter-rouge">if</code> statement to check if a circular doubly linked list is empty before starting a traversal due to the use of a post-test instead of a pre-test loop.</p>

<p>Using the same traversal algorithm as discussed earlier, the <code class="highlighter-rouge">get()</code> method uses the <code class="highlighter-rouge">i</code> variable to track how deep into the list it has traversed. When <code class="highlighter-rouge">i</code> is equal to <code class="highlighter-rouge">index</code>, the data in that node is returned (existing the loop early). If the loop exits, either because it has reached the head of the list again or <code class="highlighter-rouge">index</code> is not found in the list, then <code class="highlighter-rouge">undefined</code> is returned.</p>

<p>As with a linear doubly linked list, the <code class="highlighter-rouge">get()</code> method’s complexity ranges from O(1) to O(n);</p>

<h3 id="removing-data-from-the-list">Removing data from the list</h3>

<p>Removing data from a circular doubly linked list is basically the same as with a linear doubly linked list. The differences are:</p>

<ol>
  <li>Using a post-test loop instead of a pre-test loop for the traversal (same as <code class="highlighter-rouge">get()</code>)</li>
  <li>Ensuring that the circular links remain on the head and tail nodes when either is removed</li>
</ol>

<p>Here is what the implementation of a <code class="highlighter-rouge">remove()</code> method looks like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">CircularDoublyLinkedList</span> <span class="p">{</span>
    
    <span class="c1">// other methods hidden for clarity</span>

    <span class="nx">remove</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// special cases: no nodes in the list or `index` is an invalid value</span>
        <span class="k">if</span> <span class="p">((</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">`Index </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> does not exist in the list.`</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// save the current head for easier access</span>
        <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

        <span class="c1">// special case: removing the first node</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// if there's only one node, null out `this[head]`</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">next</span> <span class="o">===</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

                <span class="c1">// get the last item in the list</span>
                <span class="kd">const</span> <span class="nx">tail</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">previous</span><span class="p">;</span>

                <span class="cm">/*
                 * Set the tail to point to the second item in the list.
                 * Then make sure that item also points back to the tail.
                 */</span>
                <span class="nx">tail</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
                <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">tail</span><span class="p">;</span>
                
                <span class="c1">// now it's safe to update the head</span>
                <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tail</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// return the data at the previous head of the list</span>
            <span class="k">return</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">do</span> <span class="p">{</span>

            <span class="c1">// traverse to the next node</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>

            <span class="c1">// increment the count</span>
            <span class="nx">i</span><span class="o">++</span><span class="p">;</span>

        <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="nx">current</span> <span class="o">!==</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">index</span><span class="p">));</span>

        <span class="c1">// the node to remove has been found</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">])</span> <span class="p">{</span>

            <span class="c1">// skip over the node to remove</span>
            <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
            <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">;</span>

            <span class="c1">// return the value that was just removed from the list</span>
            <span class="k">return</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// `index` doesn't exist in the list so throw an error</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">`Index </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> does not exist in the list.`</span><span class="p">);</span>

    <span class="p">}</span>
        
<span class="p">}</span>
</code></pre></div></div>

<p>While there are special cases in this <code class="highlighter-rouge">remove()</code> method, almost every case requires adjusting pointers on two nodes due to the circular nature of the list. The only case where this isn’t necessary is when you are removing the only node in the list.</p>

<p>Removing the first node in the list (<code class="highlighter-rouge">index</code> is <code class="highlighter-rouge">0</code>) is treated as a special case because there is no need for traversal and <code class="highlighter-rouge">this[head]</code> must be assigned a new value. The second node in the list becomes the head and it <code class="highlighter-rouge">previous</code> pointer must be adjusted accordingly.</p>

<p>The rest of the method follows the same algorithm as for a linear doubly linked list. As we don’t need to worry about the special <code class="highlighter-rouge">this[head]</code> pointer, the search for and removal of the node at <code class="highlighter-rouge">index</code> can proceed as if the list was linear.</p>

<aside class="tip">
  <p>You can further simply removal of nodes if you don’t mind losing track of the original head of the list. The implementation of <code class="highlighter-rouge">CircularDoublyLinkedList</code> in this post assumes you want the original head of the list to remain as such unless it is removed. However, because the list is circular, it really doesn’t matter what nodes is considered the head because you can always get to every other node as long as you reference to one node. You can arbitrarily reset <code class="highlighter-rouge">this[head]</code> to any node you want an all of the functionality will continue to work.</p>
</aside>

<h3 id="creating-iterators">Creating iterators</h3>

<p>There are two distinct use cases for iterators in a circular linked list:</p>

<ol>
  <li>For use with JavaScript’s builtin iteration functionality (like <code class="highlighter-rouge">for-of</code> loops)</li>
  <li>For moving through the values of the list in a circular fashion for specific applications (like a playlist)</li>
</ol>

<p>To address the first case, it makes sense to create a <code class="highlighter-rouge">values()</code> generator method and a <code class="highlighter-rouge">Symbol.iterator</code> method on the class as these are expected on JavaScript collections. These methods are similar to those in a doubly linked list with the usual exceptions that the loop must be flipped and the you need to check to see if you’ve reached the list head to exit the loop. Those two methods look like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class CircularLinkedList {

    // other methods hidden for clarity

    values() {

        // special case: list is empty
        if (this[head] !== null) {

            // special case: only one node
            if (this[head].next === this[head]) {
                yield this[head].data;
            } else {

                let current = this[head];

                do {
                    yield current.data;
                    current = current.next;
                } while (current !== this[head]);
            }

        }
    }

    [Symbol.iterator]() {
        return this.values();
    }
}
</code></pre></div></div>

<p>The <code class="highlighter-rouge">values()</code> generator method has two special cases: when the list is empty, in which case it doesn’t yield anything, and when there is only one node, in which case traversal isn’t necessary and the data stored in the head is yielded. Otherwise, the <code class="highlighter-rouge">do-while</code> loop is the same as the one you’ve seen through this post.</p>

<p>Creating an iterator that loops around is then just a matter of modifying this algorithm so the loop never exits. Here is what that looks like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">CircularDoublyLinkedList</span> <span class="p">{</span>

    <span class="c1">// other methods hidden for clarity</span>

    <span class="o">*</span><span class="nx">circularValues</span><span class="p">()</span> <span class="p">{</span>

        <span class="c1">// special case: list is empty</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>

            <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

            <span class="c1">// infinite loop</span>
            <span class="k">do</span> <span class="p">{</span>
                <span class="k">yield</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
                <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>You wouldn’t want to use the <code class="highlighter-rouge">circularValues()</code> generator method in any situation where JavaScript will drain an iterator (as in the <code class="highlighter-rouge">for-of</code> loop) because this will cause an infinite loop and crash. Instead, manually call the <code class="highlighter-rouge">next()</code> method of the iterator whenever you need another value.</p>

<aside class="tip">
  <p>For this method, it really doesn’t matter if you use a <code class="highlighter-rouge">do-while</code> loop or a <code class="highlighter-rouge">while</code> loop. I used <code class="highlighter-rouge">do-while</code> to keep it consistent with the rest of this post, but you can use any flavor of infinite loop that you want.</p>
</aside>

<h3 id="using-the-class">Using the class</h3>

<p>Once complete, you can use the circular doubly linked list implementation like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CircularDoublyLinkedList</span><span class="p">();</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">yellow</span><span class="dl">"</span><span class="p">);</span>
    
<span class="c1">// get the second item in the list</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>       <span class="c1">// "orange"</span>

<span class="c1">// print out all items</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">color</span> <span class="k">of</span> <span class="nx">list</span><span class="p">.</span><span class="nx">values</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">color</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// remove the second item in the list    </span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>    <span class="c1">// "orange"</span>
    
<span class="c1">// get the new first item in the list</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>       <span class="c1">// "yellow"</span>

<span class="c1">// convert to an array</span>
<span class="kd">const</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">list</span><span class="p">.</span><span class="nx">values</span><span class="p">()];</span>
<span class="kd">const</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">list</span><span class="p">];</span>

<span class="c1">// manually cycle through each item in a circular manner</span>
<span class="kd">const</span> <span class="nx">iterator</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">circularValues</span><span class="p">();</span>

<span class="kd">let</span> <span class="p">{</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>    

<span class="p">({</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>    
</code></pre></div></div>

<p>The full source code is available on GitHub at my <a href="https://github.com/humanwhocodes/computer-science-in-javascript">Computer Science in JavaScript</a> project.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Circular doubly linked lists are setup in a similar manner as linear doubly linked lists in that each ndoe has a pointer to both the next and previous nodes in the list. The difference is that the list tail always points to the list head so you can follow <code class="highlighter-rouge">next</code> pointers and never receive <code class="highlighter-rouge">null</code>. This functionality can be used for applications such as playlists or round-robin distribution of data processing.</p>

<p>The implementation of doubly linked list operations differs from linear doubly linked lists in that you must use a post-test loop (<code class="highlighter-rouge">do-while</code>) to check if you’re back at the beginning of the list. For most operations, it’s important to stop when the list head has been reached again. The only exception is in creating an iterator to be called manually and which you’d prefer never ran out of items to return.</p>

<p>The complexity of circular doubly linked list operations is the same as with linear doubly linked list operations. Unlike the other data structures discussed in this blog post series, circular doubly linked lists can be helpful in JavaScript applications that require repeating cycling through the same data. That is one use case that isn’t covered well by JavaScript’s builtin collection types.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=Ui_PyERMDcs:VgQF1UjovAY:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=Ui_PyERMDcs:VgQF1UjovAY:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=Ui_PyERMDcs:VgQF1UjovAY:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=Ui_PyERMDcs:VgQF1UjovAY:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=Ui_PyERMDcs:VgQF1UjovAY:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=Ui_PyERMDcs:VgQF1UjovAY:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/Ui_PyERMDcs" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2019/03/computer-science-in-javascript-circular-doubly-linked-lists/</feedburner:origLink></item>
    
    <item>
      <title>Computer science in JavaScript: Doubly linked lists</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/nf9fzPh8D5M/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>Computer Science</category>
      
      <category>Data Structures</category>
      
      <category>JavaScript</category>
      
      <category>Linked List</category>
      
      <category>Programming</category>
      
      
      <category>Computer Science</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2019/02/computer-science-in-javascript-doubly-linked-lists/</guid>
      <description>In my previous post, I discussed creating a singly linked list in JavaScript (if you haven’t yet read that post, I suggest doing so now). A single linked list consists of nodes that each have a single pointer to the next node in the list. Singly linked lists often require traversal of the entire list...</description>
      <content:encoded><![CDATA[<p>In my <a href="https://humanwhocodes.com/blog/2019/01/computer-science-in-javascript-linked-list/">previous post</a>, I discussed creating a singly linked list in JavaScript (if you haven’t yet read that post, I suggest doing so now). A single linked list consists of nodes that each have a single pointer to the next node in the list. Singly linked lists often require traversal of the entire list for operations, and as such, have generally poor performance. One way to improve the performance of linked lists is to add a second pointer on each node that points to the previous node in the list. A linked list whose nodes point to both the previous and next nodes is called a <em>doubly linked list</em>.</p>

<h2 id="the-design-of-a-doubly-linked-list">The design of a doubly linked list</h2>

<p>Similar to a singly linked list, a doubly linked list is made up of a series of nodes. Each node contains some data as well as a pointer to the next node in the list and a pointer to the previous node. Here is a simple representation in JavaScript:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">DoublyLinkedListNode</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">DoublyLinkedListNode</code> class, the <code class="highlighter-rouge">data</code> property contains the value the linked list item should store, the <code class="highlighter-rouge">next</code> property is a pointer to the next item in the list, and the <code class="highlighter-rouge">previous</code> property is a pointer to the previous item in the list. Both the <code class="highlighter-rouge">next</code> and <code class="highlighter-rouge">previous</code> pointers start out as <code class="highlighter-rouge">null</code> because the next and previous nodes aren’t known at the time the class is instantiated. You can then create a doubly linked list using the <code class="highlighter-rouge">DoublyLinkedListNode</code> class like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// create the first node</span>
<span class="kd">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoublyLinkedListNode</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>

<span class="c1">// add a second node</span>
<span class="kd">const</span> <span class="nx">secondNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoublyLinkedListNode</span><span class="p">(</span><span class="mi">99</span><span class="p">);</span>
<span class="nx">head</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">secondNode</span><span class="p">;</span>
<span class="nx">secondNode</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>

<span class="c1">// add a third node</span>
<span class="kd">const</span> <span class="nx">thirdNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoublyLinkedListNode</span><span class="p">(</span><span class="mi">37</span><span class="p">);</span>
<span class="nx">secondNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">thirdNode</span><span class="p">;</span>
<span class="nx">thirdNode</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">secondNode</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">tail</span> <span class="o">=</span> <span class="nx">thirdNode</span><span class="p">;</span>
</code></pre></div></div>

<p>As with a singly linked list, the first node in a doubly linked list is called the head. The second and third nodes are assigned by using both the <code class="highlighter-rouge">next</code> and <code class="highlighter-rouge">previous</code> pointers on each node. The following image shows the resulting data structure.</p>

<p><a href="https://commons.wikimedia.org/w/index.php?curid=2245165"><img src="https://humanwhocodes.com/images/posts/2019/doubly-linked-list.svg" alt="Doubly linked list diagram by Lasindi - Own work, Public Domain" /></a></p>

<p>You can traverse a doubly linked list in the same way as a singly linked list by following the <code class="highlighter-rouge">next</code> pointer on each node, such as:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>

<span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Doubly linked list also typically track the last node in the list, called the <em>tail</em>. The tail of the list is useful to track both for easier insertion of new nodes and to search from the back of the list to the front. To do so, you start at the tail and follow the <code class="highlighter-rouge">previous</code> links until there are no more nodes. The following code prints out each value in the doubly linked in reverse:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">tail</span><span class="p">;</span>

<span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This ability to go backwards and forwards through a doubly linked list provides an advantage over a singly linked list by allowing searches in both directions.</p>

<h2 id="the-doublylinkedlist-class">The <code class="highlighter-rouge">DoublyLinkedList</code> class</h2>

<p>As with a singly linked list, the operations for manipulating nodes in a doubly linked list are best encapsulated in a class. Here is a simple example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">"</span><span class="s2">head</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">tail</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">"</span><span class="s2">tail</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">DoublyLinkedList</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">DoublyLinkedList</code> class represents a doubly linked list and will contain methods for interacting with the data it contains. There are two symbol properties, <code class="highlighter-rouge">head</code> and <code class="highlighter-rouge">tail</code>, to track the first and last nodes in the list, respectively. As with the singly linked list, the <code class="highlighter-rouge">head</code> and <code class="highlighter-rouge">tail</code> are not intended to be accessed from outside the class.</p>

<h3 id="adding-new-data-to-the-list">Adding new data to the list</h3>

<p>Adding an item to a doubly linked list is very similar to adding to a singly linked list. In both data structures, you must first find the last node in the list and then add a new node after it. In a singly linked list you had to traverse the entire list to find the last node whereas in a doubly linked list the last node is tracked using the <code class="highlighter-rouge">this[tail]</code> property. Here is the <code class="highlighter-rouge">add()</code> method for the <code class="highlighter-rouge">DoublyLinkedList</code> class:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">DoublyLinkedList</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nx">add</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// create the new node and place the data in it</span>
        <span class="kd">const</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoublyLinkedListNode</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                
        <span class="c1">// special case: no nodes in the list yet</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="c1">// link the current tail and new tail</span>
            <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">].</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
            <span class="nx">newNode</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="c1">// reassign the tail to be the new node</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">add()</code> method for the doubly linked list accepts one argument, the data to insert into the list. If the list is empty (both <code class="highlighter-rouge">this[head]</code> and <code class="highlighter-rouge">this[tail]</code> are <code class="highlighter-rouge">null</code>) then the new node is assigned to <code class="highlighter-rouge">this[head]</code>. If the list is not empty, then a new node is added after the current <code class="highlighter-rouge">this[tail]</code> node. The last step is to set <code class="highlighter-rouge">this[tail]</code> to be <code class="highlighter-rouge">newNode</code> because in both an empty and non-empty list the new node will always be the last node.</p>

<p>Notice that in the case of an empty list, <code class="highlighter-rouge">this[head]</code> and <code class="highlighter-rouge">this[tail]</code> are set to the same node. That’s because the single node in a one-node list is both the first and the last node in that list. Keeping proper track of the list tail is important so the list can be traversed in reverse if necessary.</p>

<p>The complexity of this <code class="highlighter-rouge">add()</code> method is O(1). For both an empty and a non-empty list, the operation doesn’t require any traversal and so is much less complex than <code class="highlighter-rouge">add()</code> for the singly linked list where only the list head was tracked.</p>

<h3 id="retrieving-data-from-the-list">Retrieving data from the list</h3>

<p>The <code class="highlighter-rouge">get()</code> method for a doubly linked list is exactly the same as the <code class="highlighter-rouge">get()</code> method for a singly linked list. In both cases, you must traverse the list starting from <code class="highlighter-rouge">this[head]</code> and track how many nodes have been seen to determine when the correct node is reached:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">DoublyLinkedList</span> <span class="p">{</span>

    <span class="c1">// other methods hidden for clarity</span>

    <span class="kd">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    
        <span class="c1">// ensure `index` is a positive value</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// the pointer to use for traversal</span>
            <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

            <span class="c1">// used to keep track of where in the list you are</span>
            <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="c1">// traverse the list until you reach either the end or the index</span>
            <span class="k">while</span> <span class="p">((</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">index</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
                <span class="nx">i</span><span class="o">++</span><span class="p">;</span>          
            <span class="p">}</span>
        
            <span class="c1">// return the data if `current` isn't null</span>
            <span class="k">return</span> <span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>To reiterate from the singly linked list post, the complexity of the <code class="highlighter-rouge">get()</code> method ranges from O(1) when removing the first node (no traversal is needed) to O(n) when removing the last node (traversing the entire list is required).</p>

<h3 id="removing-data-from-a-doubly-linked-list">Removing data from a doubly linked list</h3>

<p>The algorithm for removing data from a doubly linked list is essentially the same as with a singly linked list: first traverse the data structure to find the node in the given position (same algorithm as <code class="highlighter-rouge">get()</code>) and then remove it from the list. The only significant differences from the algorithm used in a singly linked list are:</p>

<ol>
  <li>There is no need for a <code class="highlighter-rouge">previous</code> variable to track one node back in the loop because the previous node is always available through <code class="highlighter-rouge">current.previous</code>.</li>
  <li>You need to watch for changes to the last node in the list to ensure that <code class="highlighter-rouge">this[tail]</code> remains correct.</li>
</ol>

<p>Otherwise, the <code class="highlighter-rouge">remove()</code> method looks very similar to that of the singly linked list:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">DoublyLinkedList</span> <span class="p">{</span>
    
    <span class="c1">// other methods hidden for clarity</span>

    <span class="nx">remove</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    
        <span class="c1">// special cases: no nodes in the list or `index` is negative</span>
        <span class="k">if</span> <span class="p">((</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">`Index </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> does not exist in the list.`</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// special case: removing the first node</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// store the data from the current head</span>
            <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">data</span><span class="p">;</span>

            <span class="c1">// just replace the head with the next node in the list</span>
            <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">next</span><span class="p">;</span>

            <span class="c1">// special case: there was only one node, so also reset `this[tail]`</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">previous</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// return the data at the previous head of the list</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// pointer use to traverse the list</span>
        <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

        <span class="c1">// used to track how deep into the list you are</span>
        <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="c1">// same loop as in `get()`</span>
        <span class="k">while</span> <span class="p">((</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">index</span><span class="p">))</span> <span class="p">{</span>

            <span class="c1">// traverse to the next node</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>

            <span class="c1">// increment the count</span>
            <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// if node was found, remove it</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// skip over the node to remove</span>
            <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>

            <span class="c1">// special case: this is the last node so reset `this[tail]`.</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">]</span> <span class="o">===</span> <span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">]</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">previous</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// return the value that was just removed from the list</span>
            <span class="k">return</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// if node wasn't found, throw an error</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">`Index </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> does not exist in the list.`</span><span class="p">);</span>
    <span class="p">}</span>
    
<span class="p">}</span>
</code></pre></div></div>

<p>When <code class="highlighter-rouge">index</code> is <code class="highlighter-rouge">0</code>, meaning the first node is being removed, <code class="highlighter-rouge">this[head]</code> is set to <code class="highlighter-rouge">this[head].next</code>, the same as with a singly linked list. The difference comes after that point when you need to update other pointers. If there was only one node in the list, then you need to set <code class="highlighter-rouge">this[tail]</code> to <code class="highlighter-rouge">null</code> to effectively remove that one node; if there was more than one node, you need to set <code class="highlighter-rouge">this[head].previous</code> to <code class="highlighter-rouge">null</code>. Remember that the new head was previously the second node in the list and so its <code class="highlighter-rouge">previous</code> link was pointing to the node that was just removed.</p>

<p>After the loop, you need to ensure that both the <code class="highlighter-rouge">next</code> pointer of the node before the removed node and the <code class="highlighter-rouge">previous</code> pointer of the node after the removed node. Of course, if the node to remove is the last node then you need to update the <code class="highlighter-rouge">this[tail]</code> pointer.</p>

<h3 id="creating-a-reverse-iterator">Creating a reverse iterator</h3>

<p>You can make a doubly linked list iterable in JavaScript using the same <code class="highlighter-rouge">values()</code> and <code class="highlighter-rouge">Symbol.iterator</code> methods from the singly linked list. In a doubly linked list, however, you have the opportunity to create a reverse iterator that produces the data starting from the tail and working its way towards the head. Here is what a <code class="highlighter-rouge">reverse()</code> generator method looks like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">DoublyLinkedList</span> <span class="p">{</span>

    <span class="c1">// other methods hidden for clarity</span>

    <span class="o">*</span><span class="nx">reverse</span><span class="p">(){</span>

        <span class="c1">// start by looking at the tail</span>
        <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">tail</span><span class="p">];</span>

        <span class="c1">// follow the previous links to the head</span>
        <span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">yield</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">previous</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">reverse()</code> generator method follows the same algorithm as the <code class="highlighter-rouge">values()</code> generator method in the singly linked list with the exception that <code class="highlighter-rouge">current</code> starts equal to <code class="highlighter-rouge">this[tail]</code> and the <code class="highlighter-rouge">current.previous</code> is followed until the there are no more nodes. Creating a reverse iterator is helpful for discovering bugs in the implementation as well as avoiding rearranging nodes just to access the data in a different order.</p>

<h3 id="other-methods">Other methods</h3>

<p>Most other methods that don’t involve addition or removal of nodes follow the same algorithms as those in a singly linked list.</p>

<h3 id="using-the-class">Using the class</h3>

<p>Once complete, you can use the linked list implementation like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoublyLinkedList</span><span class="p">();</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">yellow</span><span class="dl">"</span><span class="p">);</span>
    
<span class="c1">// get the second item in the list</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>       <span class="c1">// "orange"</span>

<span class="c1">// print out all items in reverse</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">color</span> <span class="k">of</span> <span class="nx">list</span><span class="p">.</span><span class="nx">reverse</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">color</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// remove the second item in the list    </span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>    <span class="c1">// "orange"</span>
    
<span class="c1">// get the new first item in the list</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>       <span class="c1">// "yellow"</span>

<span class="c1">// convert to an array</span>
<span class="kd">const</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">list</span><span class="p">.</span><span class="nx">values</span><span class="p">()];</span>
<span class="kd">const</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">list</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">array3</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">list</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()];</span>
</code></pre></div></div>

<p>The full source code is available on GitHub at my <a href="https://github.com/humanwhocodes/computer-science-in-javascript">Computer Science in JavaScript</a> project.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Doubly linked lists are similar to singly linked lists in that each node has a <code class="highlighter-rouge">next</code> pointer to the next node in the list. Each node also has a <code class="highlighter-rouge">previous</code> pointer to the previous node in the list, allowing you to move both backwards and forwards in the list easily. Doubly linked lists typically track both the first and last node in the list, and that makes adding a node into the list a O(1) operation instead of O(n) in a singly linked list.</p>

<p>However, the complexity of other doubly linked list operations is the same as with a singly linked list because you always end up traversing most of the list. As such, doubly linked lists don’t offer any real advantage over the built-in JavaScript <code class="highlighter-rouge">Array</code> class for storing a collection of unrelated data (though related data, such as sibling DOM nodes in the browser) might be useful to represent in some kind of linked list.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=nf9fzPh8D5M:i1FYVrW1u0A:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=nf9fzPh8D5M:i1FYVrW1u0A:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=nf9fzPh8D5M:i1FYVrW1u0A:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=nf9fzPh8D5M:i1FYVrW1u0A:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=nf9fzPh8D5M:i1FYVrW1u0A:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=nf9fzPh8D5M:i1FYVrW1u0A:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/nf9fzPh8D5M" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2019/02/computer-science-in-javascript-doubly-linked-lists/</feedburner:origLink></item>
    
    <item>
      <title>Why I've stopped exporting defaults from my JavaScript modules</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/7mo_DDhNCvY/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>JavaScript</category>
      
      <category>Modules</category>
      
      <category>CommonJS</category>
      
      
      <category>Opinion</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/</guid>
      <description>Last week, I tweeted something that got quite a few surprising responses: In 2019, one of the things I’m going to do is stop exporting things as default from my CommonJS/ES6 modules. Importing a default export has grown to feel like a guessing game where I have a 50/50 chance of being wrong each time....</description>
      <content:encoded><![CDATA[<p>Last week, I tweeted something that got quite a few surprising responses:</p>

<blockquote class="twitter-tweet tw-align-center">
  <p>In 2019, one of the things I’m going to do is stop exporting things as default from my CommonJS/ES6 modules.</p>

  <p>Importing a default export has grown to feel like a guessing game where I have a 50/50 chance of being wrong each time. Is it a class? Is it a function?</p>

  <p>— Nicholas C. Zakas (@slicknet) <a href="https://twitter.com/slicknet/status/1084101377297506304?ref_src=twsrc%5Etfw">January 12, 2019</a></p>
</blockquote>

<p>I tweeted this after realizing that a lot of problems I had with JavaScript modules could be traced back to fights with default exports. It didn’t matter if I was using JavaScript modules (or ECMAScript modules, as many prefer to call them) or CommonJS, I was still stumbling over importing from modules with default exports. I got a variety of responses to the tweet, many of which questioned how I could come to this decision. This post is my attempt to clarify my thinking.</p>

<h2 id="a-few-clarifications">A few clarifications</h2>

<p>As is the case with all tweets, my tweet was meant as a snapshot into an opinion I had rather than a normative reference for my entire opinion. To clarify a few points people seem confused by on Twitter:</p>

<ul>
  <li>The use case of knowing whether an export is a function or a class was an example of the type of problems I’ve encountered. It is not the <em>only</em> problem I’ve found named exports solve for me.</li>
  <li>The problems I’ve encountered don’t just happen with files in my own projects, they also happen with importing library and utility modules that I don’t own. That means naming conventions for filenames don’t solve all of the problems.</li>
  <li>I’m not saying that everyone should abandon default exports. I’m saying that in modules I’m writing, I will choose not to use default exports. You may feel differently, and that’s fine.</li>
</ul>

<p>Hopefully those clarifications setup enough context to avoid confusion throughout the rest of this post.</p>

<h2 id="default-exports-a-primer">Default exports: A primer</h2>

<p>To the best of my knowledge, default exports from modules were first popularized in CommonJS, where a module can export a default value like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">LinkedList</span><span class="p">;</span>
</code></pre></div></div>

<p>This code exports the <code class="highlighter-rouge">LinkedList</code> class but does not specify the name to be used by consumers of the module. Assuming the filename is <code class="highlighter-rouge">linked-list.js</code>, you can import that default in another CommonJS module like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">LinkedList</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./linked-list</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">require()</code> function is returning a value that I just happened to name <code class="highlighter-rouge">LinkedList</code> to match what is in <code class="highlighter-rouge">linked-list.js</code>, but I also could have chosen to name it <code class="highlighter-rouge">foo</code> or <code class="highlighter-rouge">Mountain</code> or any random identifier.</p>

<p>The popularity of default module exports in CommonJS meant that JavaScript modules were designed to support this pattern:</p>

<blockquote>
  <p>ES6 favors the single/default export style, and gives the sweetest syntax to importing the default.</p>

  <p>— David Herman <a href="https://mail.mozilla.org/pipermail/es-discuss/2014-June/037905.html">June 19, 2014</a></p>
</blockquote>

<p>So in JavaScript modules, you can export a default like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{}</span>
</code></pre></div></div>

<p>And then you can import like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">LinkedList</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./linked-list.js</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>Once again, <code class="highlighter-rouge">LinkedList</code> is this context is an arbitrary (if not well-reasoned) choice and could just as well be <code class="highlighter-rouge">Dog</code> or <code class="highlighter-rouge">symphony</code>.</p>

<h2 id="the-alternative-named-exports">The alternative: named exports</h2>

<p>Both CommonJS and JavaScript modules support named exports in addition to default exports. Named exports allow for the name of a function, class, or variable to be transferred into the consuming file.</p>

<p>In CommonJS, you create a named export by attaching a name to the <code class="highlighter-rouge">exports</code> object, such as:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">LinkedList</span> <span class="o">=</span> <span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{};</span>
</code></pre></div></div>

<p>You can then import in another file like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">LinkedList</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./linked-list</span><span class="dl">"</span><span class="p">).</span><span class="nx">LinkedList</span><span class="p">;</span>
</code></pre></div></div>

<p>Once again, the name I’ve used with <code class="highlighter-rouge">const</code> can be anything I want, but I’ve chosen to match it to the exported name <code class="highlighter-rouge">LinkedList</code>.</p>

<p>In JavaScript modules, a named export looks like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{}</span>
</code></pre></div></div>

<p>And you can import like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">LinkedList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./linked-list.js</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>In this code, <code class="highlighter-rouge">LinkedList</code> cannot be a randomly assigned identifier and must match an named export called <code class="highlighter-rouge">LinkedList</code>. That’s the only significant difference from CommonJS for the goals of this post.</p>

<p>So the capabilities of both module types support both default and named exports.</p>

<h2 id="personal-preferences">Personal preferences</h2>

<p>Before going further, it’s helpful for you to know some of my own personal preferences when it comes to writing code. These are general principles I apply to all code that I write, regardless of the programming language I use:</p>

<ol>
  <li><strong>Explicit over implicit.</strong> I don’t like having code with secrets. What something does, what something should be called, etc., should always be made explicit whenever possible.</li>
  <li><strong>Names should be consistent throughout all files.</strong> If something is an <code class="highlighter-rouge">Apple</code> in one file, I shouldn’t call it <code class="highlighter-rouge">Orange</code> in another file. An <code class="highlighter-rouge">Apple</code> should always be an <code class="highlighter-rouge">Apple</code>.</li>
  <li><strong>Throw errors early and often.</strong> If it’s possible for something to be missing then it’s best to check as early as possible and, in the best case, throw an error that alerts me to the problem. I don’t want to wait until the code has finished executing to discover that it didn’t work correctly and then hunt for the problem.</li>
  <li><strong>Fewer decisions mean faster development.</strong> A lot of the preferences I have are for eliminating decisions during coding. Every decision you make slows you down, which is why things like coding conventions lead to faster development. I want to decide things up front and then just go.</li>
  <li><strong>Side trips slow down development.</strong> Whenever you have to stop and look something up in the middle of coding, I call that a side trip. Side trips are sometimes necessary but there are a lot of unnecessary side trips that can slow things down. I try to write code that eliminates the need for side trips.</li>
  <li><strong>Cognitive overhead slows down development.</strong> Put simply: the more detail you need to remember to be productive when writing code, the slower your development will be.</li>
</ol>

<aside class="note">
  <p>The focus on speed of development is a practical one for me. As I’ve struggled with my health for years, the amount of energy I’ve had to code continued to decrease. Anything I could do to reduce the amount of time spent coding while still accomplishing my task was key.</p>
</aside>

<h2 id="the-problems-ive-run-into">The problems I’ve run into</h2>

<p>With all of this in mind, here are the top problems I’ve run into using default exports and why I believe that named exports are a better choice in most situations.</p>

<h3 id="what-is-that-thing">What is that thing?</h3>

<p>As I mentioned in my original tweet, I find it difficult to figure out what I’m importing when a module only has a default import. If you’re using a module or file you’re unfamiliar with, it can be difficult to figure out what is returned, for example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./list</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>In this context, what would you expect <code class="highlighter-rouge">list</code> to be? It’s unlikely to be a primitive value, but it could logically be a function, class, or other type of object. How will I know for sure? I need a side trip. In this case, a side trip might be any of:</p>

<ul>
  <li>If I own <code class="highlighter-rouge">list.js</code>, then I may open the file and look for the export.</li>
  <li>If I don’t own <code class="highlighter-rouge">list.js</code>, then I may open up some documentation.</li>
</ul>

<p>In either case, this now becomes an extra bit of information you need in your brain to avoid a second side trip penalty when you need to import from <code class="highlighter-rouge">list.js</code> again. If you are importing a lot of defaults from modules then either your cognitive overhead is increasing or the number of side trips is increasing. Both are suboptimal and can be frustrating.</p>

<p>Some will say that IDEs are the answer to this problem, that the IDEs should be smart enough to figure out what is being imported and tell you. While I’m all for smarter IDEs to help developers, I believe requiring IDEs to effectively use a language feature is problematic.</p>

<h3 id="name-matching-problems">Name matching problems</h3>

<p>Named exports require consuming modules to at least specify the name of the thing they are importing from a module. The benefit is that I can easily search for everywhere that <code class="highlighter-rouge">LinkedList</code> is used in a code base and know that it all refers to the same <code class="highlighter-rouge">LinkedList</code>. As default exports are not prescriptive of the names used to import them, that means naming imports becomes more cognitive overhead for each developer. You need to determine the correct naming convention, and as extra overhead, you need to make sure every developer working in the application will use the same name for the same thing. (You can, of course, allow each developer to use different names for the same thing, but that introduces more cognitive overhead for the team.)</p>

<p>Importing a named export means at least referencing the canonical name of a thing everywhere that it’s used. Even if you choose to rename an import, the decision is made explicit, and cannot be done without first referencing the canonical name in some way. In CommonJS:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyList</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./list</span><span class="dl">"</span><span class="p">).</span><span class="nx">LinkedList</span><span class="p">;</span>
</code></pre></div></div>

<p>In JavaScript modules:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">LinkedList</span> <span class="k">as</span> <span class="nx">MyList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./list.js</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>In both module formats, you’ve made an explicit statement that <code class="highlighter-rouge">LinkedList</code> is now going to be referred to as <code class="highlighter-rouge">MyList</code>.</p>

<p>When naming is consistent across a codebase, you’re able to easily do things like:</p>

<ol>
  <li>Search the codebase to find usage information.</li>
  <li>Refactor the name of something across the entire codebase.</li>
</ol>

<p>Is it possible to do this when using default exports and ad-hoc naming of things? My guess is yes, but I’d also guess that it would be a lot more complicated and error-prone.</p>

<h3 id="importing-the-wrong-thing">Importing the wrong thing</h3>

<p>Named exports in JavaScript modules have a particular advantage over default exports in that an error is thrown when attempting to import something that doesn’t exist in the module. Consider this code:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">LinkedList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./list.js</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>If <code class="highlighter-rouge">LinkedList</code> doesn’t exist in <code class="highlighter-rouge">list.js</code>, then an error is thrown. Further, tools such as IDEs and ESLint<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> are easily able to detect a missing reference before the code is executed.</p>

<h2 id="worse-tooling-support">Worse tooling support</h2>

<p>Speaking of IDEs, WebStorm is able to help write <code class="highlighter-rouge">import</code> statements for you.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> When you have finished typing an identifier that isn’t defined in the file, WebStorm will search the modules in your project to determine if the identifier is a named export in another file. At that point, it can do any of the following:</p>

<ol>
  <li>Underline the identifier that is missing its definition and show you the <code class="highlighter-rouge">import</code> statement that would fix it.</li>
  <li>Automatically add the correct <code class="highlighter-rouge">import</code> statement (if you have enable auto import)
can now automatically add an <code class="highlighter-rouge">import</code> statement based on an identifier that you type. In fact, WebStorm is able to help you a great deal when using named imports:</li>
</ol>

<p>There is a plugin for Visual Studio Code<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> that provides similar functionality. This type of functionality isn’t possible when using default exports because there is no canonical name for things you want to import.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I’ve had several productivity problems importing default exports in my projects. While none of the problems are necessarily impossible to overcome, using named imports and exports seems to better fit my preferences when coding. Making things explicit and leaning heavily on tooling makes me a productive coder, and insofar as named exports help me do that, I will likely favor them for the foreseeable future. Of course, I have no control over how third-party modules I use export their functionality, but I definitely have a choice over how my own modules export things and will choose named exports.</p>

<p>As earlier, I remind you that this is my opinion and you may not find my reasoning to be persuasive. This post was not meant to persuade anyone to stop using default exports, but rather, to better explain to those that inquired why I, personally, will stop exporting defaults from the modules I write.</p>

<h2 id="references">References</h2>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/named.md">esling-plugin-import <code class="highlighter-rouge">import/named</code> rule</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="https://www.jetbrains.com/help/webstorm/javascript-specific-guidelines.html#ws_js_auto_import">WebStorm: Auto Import in JavaScript</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="https://marketplace.visualstudio.com/items?itemName=NuclleaR.vscode-extension-auto-import">Visual Studio Extension: Auto Import</a> <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=7mo_DDhNCvY:bZ9A_Cn6iIc:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=7mo_DDhNCvY:bZ9A_Cn6iIc:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=7mo_DDhNCvY:bZ9A_Cn6iIc:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=7mo_DDhNCvY:bZ9A_Cn6iIc:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=7mo_DDhNCvY:bZ9A_Cn6iIc:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=7mo_DDhNCvY:bZ9A_Cn6iIc:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/7mo_DDhNCvY" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2019/01/stop-using-default-exports-javascript-module/</feedburner:origLink></item>
    
    <item>
      <title>Computer science in JavaScript: Linked list</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/90ZzSKZEM5o/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>Computer Science</category>
      
      <category>JavaScript</category>
      
      <category>Linked List</category>
      
      <category>Programming</category>
      
      
      <category>Computer Science</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2019/01/computer-science-in-javascript-linked-list/</guid>
      <description>Back in 2009, I challenged myself to write one blog post per week for the entire year. I had read that the best way to gain more traffic to a blog was to post consistently. One post per week seemed like a realistic goal due to all the article ideas I had but it turned...</description>
      <content:encoded><![CDATA[<p>Back in 2009, I challenged myself to write one blog post per week for the entire year. I had read that the best way to gain more traffic to a blog was to post consistently. One post per week seemed like a realistic goal due to all the article ideas I had but it turned out I was well short of 52 ideas. I dug through some half-written chapters what would eventually become <cite>Professional JavaScript</cite> and found a lot of material on classic computer science topics, including data structures and algorithms. I took that material and turned it into <a href="https://humanwhocodes.com/blog/tag/computer-science/">several posts</a> in 2009 and (and a few in 2012), and got a lot of positive feedback on them.</p>

<p>Now, at the ten year anniversary of those posts, I’ve decided to update, republish, and expand on them using JavaScript in 2019. It’s been interesting to see what has changed and what hasn’t, and I hope you enjoy them.</p>

<h2 id="what-is-a-linked-list">What is a linked list?</h2>

<p>A <em>linked list</em> is a data structure that stores multiple values in a linear fashion. Each value in a linked list is contained in its own <em>node</em>, an object that contains the data along with a link to the next node in the list. The link is a pointer to another node object or <code class="highlighter-rouge">null</code> if there is no next node. If each node has just one pointer to another node (most frequently called <code class="highlighter-rouge">next</code>) then the list is considered a <em>singly linked list</em> (or just linked list) whereas if each node has two links (usually <code class="highlighter-rouge">previous</code> and <code class="highlighter-rouge">next</code>) then it is considered a <em>doubly linked list</em>. In this post, I am focusing on singly linked lists.</p>

<h2 id="why-use-a-linked-list">Why use a linked list?</h2>

<p>The primary benefit of linked lists is that they can contain an arbitrary number of values while using only the amount of memory necessary for those values. Preserving memory was very important on older computers where memory was scarce. At that time, a built-in array in C required you to specify how many items the array could contain and the program would reserve that amount of memory. Reserving that memory meant it could not be used for the rest of the program or any other programs running at the same time, even if the memory was never filled. One memory-scarce machines, you could easily run out of available memory using arrays. Linked lists were created to work around this problem.</p>

<p>Though originally intended for better memory management, linked lists also became popular when developers didn’t know how many items an array would ultimately contain. It was much easier to use a linked list and add values as necessary than it was to accurately guess the maximum number of values an array might contain. As such, linked lists are often used as the foundation for built-in data structures in various programming languages.</p>

<p>The built-in JavaScript <code class="highlighter-rouge">Array</code> type is not implemented as a linked list, though its size is dynamic and is always the best option to start with. You might go your entire career without needing to use a linked list in JavaScript but linked lists are still a good way to learn about creating your own data structures.</p>

<h2 id="the-design-of-a-linked-list">The design of a linked list</h2>

<p>The most important part of a linked list is its node structure. Each node must contain some data and a pointer to the next node in the list. Here is a simple representation in JavaScript:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">LinkedListNode</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the <code class="highlighter-rouge">LinkedListNode</code> class, the <code class="highlighter-rouge">data</code> property contains the value the linked list item should store and the <code class="highlighter-rouge">next</code> property is a pointer to the next item in the list. The <code class="highlighter-rouge">next</code> property starts out as <code class="highlighter-rouge">null</code> because you don’t yet know the next node. You can then create a linked list using the <code class="highlighter-rouge">LinkedListNode</code> class like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// create the first node</span>
<span class="kd">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedListNode</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>

<span class="c1">// add a second node</span>
<span class="nx">head</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedListNode</span><span class="p">(</span><span class="mi">99</span><span class="p">);</span>

<span class="c1">// add a third node</span>
<span class="nx">head</span><span class="p">.</span><span class="nx">next</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedListNode</span><span class="p">(</span><span class="mi">37</span><span class="p">);</span>
</code></pre></div></div>

<p>The first node in a linked list is typically called the <em>head</em>, so the <code class="highlighter-rouge">head</code> identifier in this example represents the first node. The second node is created an assigned to <code class="highlighter-rouge">head.next</code> to create a list with two items. A third node is added by assigning it to <code class="highlighter-rouge">head.next.next</code>, which is the <code class="highlighter-rouge">next</code> pointer of the second node in the list. The <code class="highlighter-rouge">next</code> pointer of the third node in the list remains <code class="highlighter-rouge">null</code>. The following image shows the resulting data structure.</p>

<p><a href="https://commons.wikimedia.org/w/index.php?curid=2245162"><img src="https://humanwhocodes.com/images/posts/2019/singly-linked-list.svg" alt="Diagram of a Linked List by Lasindi - Own work, Public Domain" /></a></p>

<p>The structure of a linked list allows you to traverse all of the data by following the <code class="highlighter-rouge">next</code> pointer on each node. Here is a simple example of how to traverse a linked list and print each value out to the console:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">head</span><span class="p">;</span>

<span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This code uses the variable <code class="highlighter-rouge">current</code> as the pointer that moves through the linked list. The <code class="highlighter-rouge">current</code> variable is initialized to the head of the list and the <code class="highlighter-rouge">while</code> loop continues until <code class="highlighter-rouge">current</code> is <code class="highlighter-rouge">null</code>. Inside of the loop, the value stored on the <code class="highlighter-rouge">current</code> node is printed and then the <code class="highlighter-rouge">next</code> pointer is followed to the next node.</p>

<p>Most linked list operations use this traversal algorithm or something similar, so understanding this algorithm is important to understanding linked lists in general.</p>

<h2 id="the-linkedlist-class">The <code class="highlighter-rouge">LinkedList</code> class</h2>

<p>If you were writing a linked list in C, you might stop at this point and consider your task complete (although you would use a struct instead of a class to represent each node). However, in object-oriented languages like JavaScript, it’s more customary to create a class to encapsulate this functionality. Here is a simple example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">"</span><span class="s2">head</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">LinkedList</code> class represents a linked list and will contain methods for interacting with the data it contains. The only property is a symbol property called <code class="highlighter-rouge">head</code> that will contain a pointer to the first node in the list. A symbol property is used instead of a string property to make it clear that this property is not intended to be modified outside of the class.</p>

<h3 id="adding-new-data-to-the-list">Adding new data to the list</h3>

<p>Adding an item into a linked list requires walking the structure to find the correct location, creating a new node, and inserting it in place. The one special case is when the list is empty, in which case you simply create a new node and assign it to <code class="highlighter-rouge">head</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">head</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">"</span><span class="s2">head</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">add</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// create a new node</span>
        <span class="kd">const</span> <span class="nx">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedListNode</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
                
        <span class="c1">//special case: no items in the list yet</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// just set the head to the new node</span>
            <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="c1">// start out by looking at the first node</span>
            <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

            <span class="c1">// follow `next` links until you reach the end</span>
            <span class="k">while</span> <span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">next</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
            <span class="p">}</span>
           
            <span class="c1">// assign the node into the `next` pointer</span>
            <span class="nx">current</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newNode</span><span class="p">;</span>            
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">add()</code> method accepts a single argument, any piece of data, and adds it to the end of the list. If the list is empty (<code class="highlighter-rouge">this[head]</code> is <code class="highlighter-rouge">null</code>) then you assign <code class="highlighter-rouge">this[head]</code> equal to the new node. If the list is not empty, then you need to traverse the already-existing list to find the last node. The traversal happens in a <code class="highlighter-rouge">while</code> loop that start at <code class="highlighter-rouge">this[head]</code> and follows the <code class="highlighter-rouge">next</code> links of each node until the last node is found. The last node has a <code class="highlighter-rouge">next</code> property equal to <code class="highlighter-rouge">null</code>, so it’s important to stop traversal at that point rather than when <code class="highlighter-rouge">current</code> is <code class="highlighter-rouge">null</code> (as in the previous section). You can then assign the new node to that <code class="highlighter-rouge">next</code> property to add the data into the list.</p>

<aside class="note">
  <p>Traditional algorithms use two pointers, a <code class="highlighter-rouge">current</code> that points to the item being inspected and a <code class="highlighter-rouge">previous</code> that points to the node before <code class="highlighter-rouge">current</code>. When <code class="highlighter-rouge">current</code> is <code class="highlighter-rouge">null</code>, that means <code class="highlighter-rouge">previous</code> is pointing to the last item in the list. I don’t find that approach very logical when you can just check the value of <code class="highlighter-rouge">current.next</code> and exit the loop at that point.</p>
</aside>

<p>The complexity of the <code class="highlighter-rouge">add()</code> method is O(n) because you must traverse the entire list to find the location to insert a new node. You can reduce this complexity to O(1) by tracking the end of the list (usually called the <em>tail</em>) in addition to the head, allowing you to immediately insert a new node in the correct position.</p>

<h3 id="retrieving-data-from-the-list">Retrieving data from the list</h3>

<p>Linked lists don’t allow random access to its contents, but you can still retrieve data in any given position by traversing the list and returning the data. To do so, you’ll add a <code class="highlighter-rouge">get()</code> method that accepts a zero-based index of the data to retrieve, like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{</span>

    <span class="c1">// other methods hidden for clarity</span>

    <span class="kd">get</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    
        <span class="c1">// ensure `index` is a positive value</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// the pointer to use for traversal</span>
            <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

            <span class="c1">// used to keep track of where in the list you are</span>
            <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="c1">// traverse the list until you reach either the end or the index</span>
            <span class="k">while</span> <span class="p">((</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">index</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
                <span class="nx">i</span><span class="o">++</span><span class="p">;</span>          
            <span class="p">}</span>
        
            <span class="c1">// return the data if `current` isn't null</span>
            <span class="k">return</span> <span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">get()</code> method first checks to make sure that <code class="highlighter-rouge">index</code> is a positive value, otherwise it returns <code class="highlighter-rouge">undefined</code>. The <code class="highlighter-rouge">i</code> variable is used to keep track of how deep the traversal has gone into the list. The loop itself is the same basic traversal you saw earlier with the added condition that the loop should exit when <code class="highlighter-rouge">i</code> is equal to <code class="highlighter-rouge">index</code>. That means there are two conditions under which the loop can exit:</p>

<ol>
  <li><code class="highlighter-rouge">current</code> is <code class="highlighter-rouge">null</code>, which means the list is shorter than <code class="highlighter-rouge">index</code>.</li>
  <li><code class="highlighter-rouge">i</code> is equal to <code class="highlighter-rouge">index</code>, which means <code class="highlighter-rouge">current</code> is the node in the <code class="highlighter-rouge">index</code> position.</li>
</ol>

<p>If <code class="highlighter-rouge">current</code> is <code class="highlighter-rouge">null</code> then <code class="highlighter-rouge">undefined</code> is returned and otherwise <code class="highlighter-rouge">current.data</code> is returned. This check ensures that <code class="highlighter-rouge">get()</code> will never throw an error for an <code class="highlighter-rouge">index</code> that isn’t found in the list (although you could decide to throw an error instead of returning <code class="highlighter-rouge">undefined</code>).</p>

<p>The complexity of the <code class="highlighter-rouge">get()</code> method ranges from O(1) when removing the first node (no traversal is needed) to O(n) when removing the last node (traversing the entire list is required). It’s difficult to reduce complexity because a search is always required to identify the correct value to return.</p>

<h3 id="removing-data-from-a-linked-list">Removing data from a linked list</h3>

<p>Removing data from a linked list is a little bit tricky because you need to ensure that all <code class="highlighter-rouge">next</code> pointers remain valid after a node is removed. For instance, if you want to remove the second node in a three-node list, you’ll need to ensure that the first node’s <code class="highlighter-rouge">next</code> property now points to the third node instead of the second. Skipping over the second node in this way effectively removes it from the list.</p>

<p><a href="http://en.wikipedia.org/wiki/File:Singly_linked_list_delete_after.png"><img src="https://humanwhocodes.com/images/wp-content/uploads/2009/04/Singly_linked_list_delete_after.png" alt="Linked list removal diagram" /></a></p>

<p>The remove operation is actually two operations:</p>

<ol>
  <li>Find the specified index (the same algorithm as in <code class="highlighter-rouge">get()</code>)</li>
  <li>Remove the node at that index</li>
</ol>

<p>Finding the specified index is the same as in the <code class="highlighter-rouge">get()</code> method, but in this loop you also need to track the node that comes before <code class="highlighter-rouge">current</code> because you’ll need to modify the <code class="highlighter-rouge">next</code> pointer of the previous node.</p>

<p>There are also four special cases to consider:</p>

<ol>
  <li>The list is empty (no traversal is possible)</li>
  <li>The index is less than zero</li>
  <li>The index is greater than the number of items in the list</li>
  <li>The index is zero (removing the head)</li>
</ol>

<p>In the first three cases, the removal operation cannot be completed, and so it makes sense to throw an error; the fourth special case requires rewriting the <code class="highlighter-rouge">this[head]</code> property. Here is what the implementation of a <code class="highlighter-rouge">remove()</code> method looks like:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{</span>

    <span class="c1">// other methods hidden for clarity</span>

    <span class="nx">remove</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    
        <span class="c1">// special cases: empty list or invalid `index`</span>
        <span class="k">if</span> <span class="p">((</span><span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">`Index </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> does not exist in the list.`</span><span class="p">);</span>
        <span class="p">}</span>
 
        <span class="c1">// special case: removing the first node</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// temporary store the data from the node</span>
            <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">data</span><span class="p">;</span>

            <span class="c1">// just replace the head with the next node in the list</span>
            <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">].</span><span class="nx">next</span><span class="p">;</span>

            <span class="c1">// return the data at the previous head of the list</span>
            <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// pointer use to traverse the list</span>
        <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

        <span class="c1">// keeps track of the node before current in the loop</span>
        <span class="kd">let</span> <span class="nx">previous</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

        <span class="c1">// used to track how deep into the list you are</span>
        <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="c1">// same loops as in `get()`</span>
        <span class="k">while</span> <span class="p">((</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">index</span><span class="p">))</span> <span class="p">{</span>

            <span class="c1">// save the value of current</span>
            <span class="nx">previous</span> <span class="o">=</span> <span class="nx">current</span><span class="p">;</span>

            <span class="c1">// traverse to the next node</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>

            <span class="c1">// increment the count</span>
            <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// if node was found, remove it</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// skip over the node to remove</span>
            <span class="nx">previous</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>

            <span class="c1">// return the value that was just removed from the list</span>
            <span class="k">return</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// if node wasn't found, throw an error</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">`Index </span><span class="p">${</span><span class="nx">index</span><span class="p">}</span><span class="s2"> does not exist in the list.`</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">remove()</code> method first checks for two special cases, an empty list (<code class="highlighter-rouge">this[head]</code> is <code class="highlighter-rouge">null</code>) and an <code class="highlighter-rouge">index</code> that is less than zero. An error is thrown in both cases.</p>

<p>The next special case is when <code class="highlighter-rouge">index</code> is <code class="highlighter-rouge">0</code>, meaning that you are removing the list head. The new list head should be the second node in the list, so you can set <code class="highlighter-rouge">this[head]</code> equal to <code class="highlighter-rouge">this[head].next</code>. It doesn’t matter if there’s only one node in the list because <code class="highlighter-rouge">this[head]</code> would end up equal to <code class="highlighter-rouge">null</code>, which means the list is empty after the removal. The only catch is to store the data from the original head in a local variable, <code class="highlighter-rouge">data</code>, so that it can be returned.</p>

<p>With three of the four special cases taken care of, you can now proceed with a traversal similar to that found in the <code class="highlighter-rouge">get()</code> method. As mentioned earlier, this loop is slightly different in that the <code class="highlighter-rouge">previous</code> variable is used to keep track of the node that appears just before <code class="highlighter-rouge">current</code>, as that information is necessary to propely remove a node. Similar to <code class="highlighter-rouge">get()</code>, when the loop exits <code class="highlighter-rouge">current</code> may be <code class="highlighter-rouge">null</code>, indicating that the index wasn’t found. If that happens then an error is thrown, otherwise, <code class="highlighter-rouge">previous.next</code> is set to <code class="highlighter-rouge">current.next</code>, effectively removing <code class="highlighter-rouge">current</code> from the list. The data stored on <code class="highlighter-rouge">current</code> is returned as the last step.</p>

<p>The complexity of the <code class="highlighter-rouge">remove()</code> method is the same as <code class="highlighter-rouge">get()</code> and ranges from O(1) when removing the first node to O(n) when removing the last node.</p>

<h3 id="making-the-list-iterable">Making the list iterable</h3>

<p>In order to be used with the JavaScript <code class="highlighter-rouge">for-of</code> loop and array destructuring, collections of data must be iterables. The built-in JavaScript collections such as <code class="highlighter-rouge">Array</code> and <code class="highlighter-rouge">Set</code> are iterable by default, and you can make your own classes iterable by specifying a <code class="highlighter-rouge">Symbol.iterator</code> generator method on the class. I prefer to first implement a <code class="highlighter-rouge">values()</code> generator method (to match the method found on built-in collection classes) and then have <code class="highlighter-rouge">Symbol.iterator</code> call <code class="highlighter-rouge">values()</code> directly.</p>

<p>The <code class="highlighter-rouge">values()</code> method need only do a basic traversal of the list and <code class="highlighter-rouge">yield</code> the data that each node contains:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{</span>

    <span class="c1">// other methods hidden for clarity</span>

    <span class="o">*</span><span class="nx">values</span><span class="p">(){</span>
        
        <span class="kd">let</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">head</span><span class="p">];</span>

        <span class="k">while</span> <span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">yield</span> <span class="nx">current</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">values</span><span class="p">();</span>
    <span class="p">}</span>    

<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">values()</code> method is marked with an asterisk (<code class="highlighter-rouge">*</code>) to indicate that it’s a generator method. The method traverses the list, using <code class="highlighter-rouge">yield</code> to return each piece of data it encounters. (Note that the <code class="highlighter-rouge">Symbol.iterator</code> method isn’t marked as a generator because it is returning an iterator from the <code class="highlighter-rouge">values()</code> generator method.)</p>

<h3 id="using-the-class">Using the class</h3>

<p>Once complete, you can use the linked list implementation like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">yellow</span><span class="dl">"</span><span class="p">);</span>
    
<span class="c1">// get the second item in the list</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>       <span class="c1">// "orange"</span>

<span class="c1">// print out all items</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">color</span> <span class="k">of</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">color</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// remove the second item in the list    </span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>    <span class="c1">// "orange"</span>
    
<span class="c1">// get the new first item in the list</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>       <span class="c1">// "yellow"</span>

<span class="c1">// convert to an array</span>
<span class="kd">const</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">list</span><span class="p">.</span><span class="nx">values</span><span class="p">()];</span>
<span class="kd">const</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">list</span><span class="p">];</span>
</code></pre></div></div>

<p>This basic implementation of a linked list can be rounded out with a <code class="highlighter-rouge">size</code> property to count the number of nodes in the list, and other familiar methods such as <code class="highlighter-rouge">indexOf()</code>. The full source code is available on GitHub at my <a href="https://github.com/humanwhocodes/computer-science-in-javascript">Computer Science in JavaScript</a> project.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Linked lists aren’t something you’re likely to use every day, but they are a foundational data structure in computer science. The concept of using nodes that point to one another is used in many other data structures are built into many higher-level programming languages. A good understanding of how linked lists work is important for a good overall understanding of how to create and use other data structures.</p>

<p>For JavaScript programming, you are almost always better off using the built-in collection classes such as <code class="highlighter-rouge">Array</code> rather than creating your own. The built-in collection classes have already been optimized for production use and are well-supported across execution environments.</p>

<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=90ZzSKZEM5o:oq1Ep6hWbco:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=90ZzSKZEM5o:oq1Ep6hWbco:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=90ZzSKZEM5o:oq1Ep6hWbco:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=90ZzSKZEM5o:oq1Ep6hWbco:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=90ZzSKZEM5o:oq1Ep6hWbco:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=90ZzSKZEM5o:oq1Ep6hWbco:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/90ZzSKZEM5o" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2019/01/computer-science-in-javascript-linked-list/</feedburner:origLink></item>
    
    <item>
      <title>My (somewhat) complete salary history as a software engineer</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/u5k9J4IMl2w/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>Salary</category>
      
      <category>Compensation</category>
      
      <category>Stock Options</category>
      
      
      <category>Career</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2018/10/my-somewhat-complete-salary-history-software-engineer/</guid>
      <description>It’s 2018 and somehow women are still getting paid less than men, even in supposedly progressive industries like software.[1] Whether that be from companies offering women less than men for the same position, women being less likely to negotiate or less successful in negotiations, or any of the other myriad reasons, the results are still...</description>
      <content:encoded><![CDATA[<p>It’s 2018 and somehow women are still getting paid less than men, even in supposedly progressive industries like software.[1] Whether that be from companies offering women less than men for the same position, women being less likely to negotiate or less successful in negotiations, or any of the other myriad reasons, the results are still the same: women make less than men for the same job. That’s something that shouldn’t be happening in today’s world and it’s up to us (read: men) to step up and make things right. This is my attempt to do just that.</p>

<h2 id="why-am-i-doing-this">Why am I doing this?</h2>

<p>Longtime followers know that I’ve been dealing with serious health issues for several years. Two and a half years ago I had to stop working to focus on my health and it will likely be a couple more years before I’m able to even consider working a full-time job again. The people responsible for my last compensation package have long since left that company. That puts me in a unique position where I am not beholden to any past employers, and any future employers are far enough into the future that the information I’m sharing here will be mostly useless by then. Plus, as a white man, I know I’m going to be able to negotiate for my salary without backlash[2] when I do start working again. As such, the information in this post is more valuable to others than it is to me.</p>

<aside class="note">
  <p>I’ve been annoyed that throughout my career I’ve been lectured many times to avoid discussing my compensation with colleagues. Usually it’s with the warning that, “not everyone is getting what you’re getting, and we don’t want to hurt feelings.” It took me a long time to realize that the “hurt feelings” they’re talking about come from an overall lack of transparency into the compensation process, and that simply explaining why people are compensated in certain ways would be a better solution than to hide all of the information from everyone. Yes, there will always be people who think they deserve to be making more but who don’t actually deserve it. That seems like a great way to communicate that they aren’t doing a good enough job and figure out ways to improve.</p>
</aside>

<p>The bottom line is that nothing gets better unless people are willing to share information. And while I could just share my last salary, I don’t think that’s very useful, especially when compared with the variety of already-available sources of information online. No, to be useful, I felt like I would need to reveal my entire salary history so people can determine for themselves if they’re seeing enough improvement in their salaries over time.</p>

<h2 id="where-did-this-data-come-from">Where did this data come from?</h2>

<p>The data in this post comes from the following sources:</p>

<ol>
  <li>My memory. Yes, memory is fallible, but there are some data points that are so important on an emotional level that they tend to stick in my brain. I’ll point those out.</li>
  <li>Offer letters. As my offer letters post-2006 were always emailed to me, I’ve been able to be 100% sure of those details. Prior to 2006, my offer letters were always mailed to me, and I have no record of those.</li>
</ol>

<p>Where my memory fails me and I don’t have an offer letter, I’ve made an attempt to guess the salary range I had at the time.</p>

<h2 id="the-data">The data</h2>

<p>The table below contains all of my salary (and some other compensation history). I’m including what I believe to be data relevant to evaluating the compensation include the year I received the salary, the years of experience I had at the time (<b>YOE</b>), the starting and ending salary to take into account raises, and any signing bonus (<b>Signing $</b>) and stock options (<b>Options</b>) I might have received. Any amount with a question mark indicates that I’m guessing. I did not include any restricted stock units I might have received because I only ever received them at Yahoo as part of my initial offer.</p>

<table>
  <thead>
    <tr>
      <th>Year</th>
      <th>YOE</th>
      <th>Company</th>
      <th>State</th>
      <th>Title</th>
      <th>Starting $</th>
      <th>Ending $</th>
      <th>Signing $</th>
      <th>Options</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2000</td>
      <td>0</td>
      <td>Radnet, Inc.</td>
      <td>MA</td>
      <td>Webmaster</td>
      <td>$48,000</td>
      <td>$55,000</td>
      <td>-</td>
      <td>?</td>
    </tr>
    <tr>
      <td>2001</td>
      <td>0</td>
      <td>Radnet, Inc.</td>
      <td>MA</td>
      <td>UI Developer</td>
      <td>$62,500</td>
      <td>$62,500</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td>2001</td>
      <td>0</td>
      <td>MatrixOne, Inc.</td>
      <td>MA</td>
      <td>UI Designer/Developer</td>
      <td>$68,000?</td>
      <td>?</td>
      <td>$2,000</td>
      <td>?</td>
    </tr>
    <tr>
      <td>2003</td>
      <td>3</td>
      <td>MatrixOne, Inc.</td>
      <td>MA</td>
      <td>Senior Software Engineer</td>
      <td>?</td>
      <td>$75,000?</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td>2005</td>
      <td>5</td>
      <td>Vistaprint, Inc.</td>
      <td>MA</td>
      <td>Lead Software Engineer</td>
      <td>$82,000?</td>
      <td>$98,000</td>
      <td>-</td>
      <td>3,000</td>
    </tr>
    <tr>
      <td>2006</td>
      <td>6</td>
      <td>Yahoo, Inc.</td>
      <td>CA</td>
      <td>Senior Front-end Engineer</td>
      <td>$115,000</td>
      <td>?</td>
      <td>$10,000</td>
      <td>3,500</td>
    </tr>
    <tr>
      <td>2008</td>
      <td>8</td>
      <td>Yahoo, Inc.</td>
      <td>CA</td>
      <td>Principal Front-end Engineer</td>
      <td>?</td>
      <td>?</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td>2011</td>
      <td>11</td>
      <td>Yahoo, Inc.</td>
      <td>CA</td>
      <td>Presentation Architect</td>
      <td>?</td>
      <td>$165,000?</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td>2013</td>
      <td>13</td>
      <td>Box, Inc.</td>
      <td>CA</td>
      <td>Staff Software Engineer</td>
      <td>$175,000</td>
      <td>?</td>
      <td>$25,000</td>
      <td>50,000</td>
    </tr>
    <tr>
      <td>2014</td>
      <td>14</td>
      <td>Box, Inc.</td>
      <td>CA</td>
      <td>Principal Architect</td>
      <td>$208,000</td>
      <td>$220,000</td>
      <td>-</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<h2 id="job-details">Job Details</h2>

<p>The data alone doesn’t really tell the full story, so here are the details around each position. I’ve also included how I came to work at each company, as I think it’s important to recognize blind resume submissions from having contacts as a company.</p>

<p>In 2006, I moved from Massachusetts to California. This undoubtedly affected my pay positively due to the higher cost of living in California. At one point, my manager mentioned that if I moved back to Massachusetts, I should expect a 10% pay cut due to cost of living differences. I’m still in California, so I have no idea if that was accurate.</p>

<h3 id="radnet-2000-2001">Radnet (2000-2001)</h3>

<p>My first job out of college was at a small startup in Wakefield, MA called Radnet, Inc. I got this job because the woman who used to babysit me as a child was running human resources at the company. My official title was webmaster, and I thought I would be coming in to run the company website. As it turned out, between the time they offered me the job and my starting day, they had hired someone to oversee both UI development and the website. As it turned out, I would never manage the website and instead would spend time making JavaScript components for the company’s web application.</p>

<p>I know that my starting salary was $48,000 (about $70,284 in 2018 dollars) because I was very excited about it. After spending summers working jobs that ranged from $2/hour to $6/hour, this seemed like an incredible amount of money to me. A few months in, they gave me a raise to $55,000 because I was doing a good job. Towards the end of 2000, they believed the company would be bought and so they changed my title to UI Developer and upped my salary to $62,500 with the belief that an acquirer would immediately fire the “webmaster” and ensuring I’d benefit from the acquisition.</p>

<p>As it turned out, the company never got bought and so it shutdown in January 2001. I never really saw much of the $62,500, and eight months after I had started my first job, I was unemployed.</p>

<p>The job itself was pretty low-stress. I worked an even 40 hours per week during my eight months there, and never once worked on a weekend.</p>

<p><strong>Note:</strong> I did receive stock options for this position, but I don’t remember what they were. I didn’t really understand what stock options were at the time so that information never stuck in my brain.</p>

<h3 id="matrixone-2001-2005">MatrixOne (2001-2005)</h3>

<p>When Radnet closed down, my manager ended up at MatrixOne and asked if I would like to join him. I had enjoyed working with him at Radnet so I accepted. It’s important to understand that this was during the dot-com crash and there weren’t a lot of tech jobs to be had in Massachusetts at the time. I considered myself lucky to have formed a good relationship that allowed me to find a new job fairly quickly after Radnet shut down.</p>

<p>I don’t remember all of the details but I’m pretty sure my starting salary was close to $68,000 ($96,814 in 2018 dollars). I’m also reasonably certain that I got a small signing bonus, maybe around $2,000, that my manager negotiated for me. I also received some stock options, but once again, I didn’t really understand what they were and so didn’t even register them as part of my compensation. It didn’t matter, though, because the company stock was never again as high as the day I joined. I was never able to exercise options, even when I got some repriced options later in my career there because the stock only ever went down. (Eventually the company would be bought out by a competitor.)</p>

<p>My salary didn’t improve much there because the company was in perpetually poor financial health. There was a salary freeze in place almost the entire time I was there. I survived four rounds of layoffs. I was eventually “promoted” to the position of Senior Software Engineer, but it was a promotion in title only. There was no increase in salary (because of the salary freeze) and no change in my responsibilities (because the organization was weird). It was just a pat on the back to say, “good job, please don’t leave.” Spoiler alert: I left as soon as I could.</p>

<p>Right before I left, I did get a salary increase to around $75,000. It wasn’t enough to make me want to stay.</p>

<p>In terms of workload, once again I stuck pretty close to 40 hours per week and never worked a weekend. My commute, however, added three hours every day (1.5 hours each way). Adding in the commute time would make it 55 hours per week.</p>

<p>This was the busiest time of my life, as I was not only working full time but was also writing my first book (nights and weekends) and going to school for my master’s degree (nights and weekends). I’m not quite sure how I ended up doing all of that, and managing a serious relationship with my then-partner, but somehow I made it through.</p>

<h3 id="vistaprint-2005-2006">Vistaprint (2005-2006)</h3>

<p>I often refer to my position at Vistaprint as my first real software engineering job. It was the first time I applied for a software engineering job without having a connection at the company; I just sent my resume in to their email address. I reported into the engineering organization (as opposed to the design organization in my prior jobs), and I got what I considered to be a good offer. The company was pre-IPO, and I was excited to get 3,000 stock options. (By this time, I actually understood what stock options were.)</p>

<p>I don’t recall the starting salary but I suspect it was around $82,000 ($105,867 in 2018 dollars). I definitely recall the ending salary as $98,000 for a few reasons. First, I was complaining a lot about the boring project they had assigned me to so I expected that would eliminate me from any serious raise considerations. I was shocked to get a raise and even more shocked at the amount. Second, I was bummed they didn’t give me the extra $2,000 to make an even $100,000. Last, I was secretly interviewing with both Google and Yahoo, and upping my salary meant that I could use that number when it came time to talk compensation with them.</p>

<p>I was only at Vistaprint for a little over a year before deciding to move to California to work for Yahoo. Vistaprint did go public while I was there, but since I left after a year, I didn’t see much from those stock options.</p>

<p>The workload here was heavier but I still managed to stick to 40-45 hours per week. I don’t recall working any weekends, however, I do recall sometimes needing to work from home in the evening or early morning. All in all, though, the workload wasn’t that bad.</p>

<h3 id="yahoo-2006-2011">Yahoo (2006-2011)</h3>

<p>Yahoo’s initial offer was the best I had received up to that point. In addition to a $115,000 base salary ($143,833 in 2018 dollars), it included $10,000 signing bonus, 3,500 stock options, 1,500 RSUs, and relocation expenses. This was the first time I tried to negotiate for a higher starting salary and was summarily rejected. At least I tried.</p>

<p>I ended up at Yahoo through a circuitous route. I had heard that Yahoo was using my first book, <cite>Professional JavaScript for Web Developers</cite>, to teach JavaScript at the company. As such, I had an open invitation to stop by the campus if I was ever in the area. I had traveled to Mountain View to interview Google (they had found me through my second book, <cite>Professional Ajax</cite>) and so reached out to the folks at Yahoo to meet up. I didn’t realize that conversation would turn into an invitation to apply to work at Yahoo as well.</p>

<p>I don’t remember a lot of my pay details after I joined. Being at Yahoo for almost five years, I got several raises and two promotions, so my pay did keep increasing.  All of that information was sent to my Yahoo corporate email address, and as such, I no longer have any of the documentation. That was intermixed with periods of layoffs and salary freezes. My initial stock options ended up worthless because the company stock price never again reached the level it was at when the options were priced. I would later get repriced stock options and more RSUs, but I don’t have specifics on that.</p>

<p>By the time I left, I suspect I was making around $165,000 based on how I felt about the offer from Box.</p>

<p>It’s worth noting that I left Yahoo to try to start a company with some friends and so didn’t have a regular salary for about 18 months.</p>

<p>The workload at Yahoo varied based on the position I had at that time. When I first arrived at Yahoo, I was in a deep depression after moving across the country to a place where I didn’t know anyone. I found being alone in my apartment to be unbearable and so I would go into work early and leave late. Focusing on my work kept the bad thoughts out of my head and I really enjoyed working on My Yahoo, so it was a good mix. I was probably in the office from 9am to 7pm most days.</p>

<p>Once I got more comfortable and started meeting people, I spent less time at the office and settled back into more of a 40-hour work week. Unfortunately, I also got more involved with writing and speaking, and those activities started to fill my nights and weekends. Before I knew it, I was basically working every day from the moment I woke up until the moment I went to sleep. Even though all of the work wasn’t Yahoo was paying me for, it was all the same type of work, so it all flowed together.</p>

<p>The one thing I never did, though, was check my work email from home. I told everyone that leaving the office meant I was off the clock and the only way to reach me was to call me (I did give everyone my cell phone number). In my almost five years at Yahoo, I was only ever called once.</p>

<p>There were several occasions when I had to work over the weekend, but my managers were very good about giving me that time back the next week. If I had to work over the weekend then I could choose the same number of days during the week to take off (I’d usually take Thursday and Friday the next week to get a long weekend).</p>

<h3 id="box-2013-2016">Box (2013-2016)</h3>

<p>My offer from Box was also strong. The starting salary of $175,000 ($189,415 in 2018 dollars) was more than enough to make me happy at the time, and the offer included 50,000 stock options. Box was pre-IPO so that high stock option allocation (which I was told was higher than what they usually gave people at my level) was a big consideration for me. I negotiated for a $25,000 signing bonus, as well.</p>

<p>As part of my consulting business, I would regularly give talks at different companies. I agreed to give a talk for free at Box because a friend worked there and mentioned that they were having trouble managing their growing JavaScript code base. I spoke with a few people after the talk, including the VP of engineering, and we decided to explore if working at Box was a good fit for the company and me. Through several more discussions, it seemed like a good opportunity to get back into the stability of a regular salary with some interesting problems to tackle.</p>

<p>My memory is a bit hazy around what happened between joining and the end of my time at Box as this was the period when my health was on a steep decline. I think I got one raise as a Staff Software Engineer about three months after I joined, and was informed of being promoted to Principal Architect six months after I joined (although I wouldn’t get the pay increase for another six months). I’m reasonably certain the promotion pay increase bumped me to $208,000. I recall clearly that I got one last raise to push me to $220,000 during 2014 because I had started working from home full time due to my health and I thought it was very nice of them to give me a raise regardless.</p>

<p>At Box, I managed my workload very carefully due to my health. I started out at 40 hours per week but as my health declined, that number went down. I definitely dipped below that level later, but since we were evaluated on our impact rather than number of hours worked, I still got consistently positive reviews from my peers and manager. Box was also gracious enough to give me flexibility to work from home for two years, and even then, to work my own schedule as my health allowed. Ironically, it was my declining health that forced me to get smarter about how I worked and really keep my hours sane. I was also not spending time writing and speaking after the first year.</p>

<p>I left Box when I was no longer physically able to work from home.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In my sixteen year career, I averaged a pay increase of $10,000 per year, even when taking into account several years of salary freezes at MatrixOne and Yahoo. As such, I suspect I’d be making around $250,000 if I was working full time today.</p>

<p>It’s also important to understand that I never asked for a raise and only negotiated other details occassionally (as mentioned in the post). I never really felt comfortable with negotiations prior to working for myself, and generally was happy with the offers I received.</p>

<p>With the exception of my one year at Vistaprint (during which I was a grouchy pain in the ass), I was consistently reviewed as a top performer at my position. I wasn’t put on any sort of improvement plan and most of my feedback had to do with improving interactions and communication with colleagues. And again, with the exception of Vistaprint (because…pain in the ass), I took the feedback to heart and worked to improve in those areas.</p>

<p>Being single and not having a family to support throughout my entire career meant that I had more options. I could afford to take salary that was lower than what I wanted or could get elsewhere, and I could also afford to walk away from valuable stock options (such as with Vistaprint) to find a job that was more fulfilling. I recognize that not everyone has that option, so I think it’s important to make my situation clear here.</p>

<p>I have two hopes from sharing this information. First, I hope that having this information will make it easier for women to understand how much they should be paid for similar work and just how their pay should be increasing throughout their career. Second, I hope that other men who are in a similarly independent position will also share their compensation history to benefit others.</p>

<p>We can all be better if we’re willing to share.</p>

<h2 id="updates">Updates</h2>

<ul>
  <li><strong>30-October-2018</strong> - added in details about hours worked per week based on feedback.</li>
  <li><strong>31-October-2018</strong> - many people are sharing their salary histories on <a href="https://news.ycombinator.com/item?id=18342996">Hacker News</a>.</li>
  <li><strong>09-November-2018</strong> - <cite>Business Insider</cite> has <a href="https://www.businessinsider.com/software-engineer-salary-history-2018-11">republished</a> this article.</li>
</ul>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://www.forbes.com/sites/tanyatarr/2018/04/04/by-the-numbers-what-pay-inequality-looks-like-for-women-in-tech/">By the Numbers: What pay inequality looks like for women in tech</a> (forbes.com)</li>
  <li><a href="https://www.theatlantic.com/business/archive/2017/01/women-negotiating/512174/">Women Know When Negotiating Isn’t Worth It</a> (theatlantic.com)</li>
</ol>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=u5k9J4IMl2w:51qL0ubcayA:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=u5k9J4IMl2w:51qL0ubcayA:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=u5k9J4IMl2w:51qL0ubcayA:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=u5k9J4IMl2w:51qL0ubcayA:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=u5k9J4IMl2w:51qL0ubcayA:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=u5k9J4IMl2w:51qL0ubcayA:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/u5k9J4IMl2w" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2018/10/my-somewhat-complete-salary-history-software-engineer/</feedburner:origLink></item>
    
    <item>
      <title>Extracting command line arguments from Node.js using destructuring</title>
      <link>http://feedproxy.google.com/~r/nczonline/~3/6irWseuJCAw/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      <dc:creator>Nicholas C. Zakas</dc:creator>
      
      <category>JavaScript</category>
      
      <category>Destructuring</category>
      
      <category>Node.js</category>
      
      
      <category>Tutorial</category>
      
      <guid isPermaLink="false">https://humanwhocodes.com/blog/2018/10/extracting-command-line-arguments-nodejs/</guid>
      <description>If you’ve worked on a Node.js command-line program, you were probably faced with the extraction of command line arguments. Node.js provides all command line arguments in the process.argv array. However, the contents of the array aren’t what you might expect. What’s in process.argv? The first two items in process.argv are: The path to the executable...</description>
      <content:encoded><![CDATA[<p>If you’ve worked on a Node.js command-line program, you were probably faced with the extraction of command line arguments. Node.js provides all command line arguments in the <code class="highlighter-rouge">process.argv</code> array. However, the contents of the array aren’t what you might expect.</p>

<h2 id="whats-in-processargv">What’s in process.argv?</h2>

<p>The first two items in <code class="highlighter-rouge">process.argv</code> are:</p>

<ol>
  <li>The path to the executable running the JavaScript file</li>
  <li>The path of the JavaScript file being executed</li>
</ol>

<p>So the first command line argument is the third item in the array. For example, consider the following command that runs a Node.js program:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node index.js --watch
</code></pre></div></div>

<p>The contents of <code class="highlighter-rouge">process.argv</code> will look something like this (depending on your system and file root)</p>

<ol>
  <li><code class="highlighter-rouge">/usr/bin/node</code></li>
  <li><code class="highlighter-rouge">/home/nzakas/projects/example/index.js</code></li>
  <li><code class="highlighter-rouge">--watch</code></li>
</ol>

<p>While the first two items in the array might be useful to some, chances are that you’re only interested in <code class="highlighter-rouge">--watch</code>. Fortunately, you can use JavaScript destructuring to pick out just the command line arguments you want.</p>

<h2 id="using-destructuring-to-extract-arguments">Using destructuring to extract arguments</h2>

<p>Using JavaScript destructuring, you can separate the <code class="highlighter-rouge">process.argv</code> array into pieces and only use what you need. For example, this code separates the array into its three parts:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span> <span class="nx">bin</span><span class="p">,</span> <span class="nx">sourcePath</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>   <span class="c1">// "--watch"</span>
</code></pre></div></div>

<p>Here, the <code class="highlighter-rouge">bin</code> variable receives the Node.js executable path, <code class="highlighter-rouge">sourcePath</code> receives the JavaScript filepath, and the rest element <code class="highlighter-rouge">args</code> is an array containing all of the remaining command line arguments.</p>

<p>You can take this one step further and just omit <code class="highlighter-rouge">bin</code> and <code class="highlighter-rouge">sourcePath</code> if you have no use for them:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span> <span class="p">,</span> <span class="p">,</span> <span class="p">...</span><span class="nx">args</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>   <span class="c1">// "--watch"</span>
</code></pre></div></div>

<p>The two commas at the beginning of the pattern indicate that you’d like to skip over the first two items in the array and store the remaining items in the <code class="highlighter-rouge">args</code> array. You can then further process <code class="highlighter-rouge">args</code> to determine what to do next.</p>

<h2 id="conclusion">Conclusion</h2>

<p>While the <code class="highlighter-rouge">process.argv</code> array is a bit confusing at first, you can easily slice off just the information you’re interested in using JavaScript destructuring. Destructuring assignment is ideally suited for extracting just the information you want from an array.</p>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/nczonline?a=6irWseuJCAw:RI_fMN5gdXI:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/nczonline?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=6irWseuJCAw:RI_fMN5gdXI:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/nczonline?i=6irWseuJCAw:RI_fMN5gdXI:V_sGLiPBpWU" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=6irWseuJCAw:RI_fMN5gdXI:qj6IDK7rITs"><img src="http://feeds.feedburner.com/~ff/nczonline?d=qj6IDK7rITs" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/nczonline?a=6irWseuJCAw:RI_fMN5gdXI:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/nczonline?i=6irWseuJCAw:RI_fMN5gdXI:F7zBnMyn0Lo" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/nczonline/~4/6irWseuJCAw" height="1" width="1" alt=""/>]]></content:encoded>
    <feedburner:origLink>https://humanwhocodes.com/blog/2018/10/extracting-command-line-arguments-nodejs/</feedburner:origLink></item>
    
  </channel>
</rss>
